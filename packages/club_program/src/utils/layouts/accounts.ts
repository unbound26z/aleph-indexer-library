import {
  clubDataDiscriminator,
  clubDataBeet,
  whitelistingDataDiscriminator,
  whitelistingDataBeet,
  adminsDiscriminator,
  adminsBeet,
  clubVaultDiscriminator,
  clubVaultBeet,
  clubVaultDataDiscriminator,
  clubVaultDataBeet,
  withdrawalDiscriminator,
  withdrawalBeet,
  withdrawalDataDiscriminator,
  withdrawalDataBeet,
  fundraiseConfigDiscriminator,
  fundraiseConfigBeet,
  financialRecordDiscriminator,
  financialRecordBeet,
  financialRecordOfferDiscriminator,
  financialRecordOfferBeet,
  maxVoterWeightRecordDiscriminator,
  maxVoterWeightRecordBeet,
  voterWeightRecordDiscriminator,
  voterWeightRecordBeet,
  allowedMemberDataDiscriminator,
  allowedMemberDataBeet,
  nftVoteRecordDiscriminator,
  nftVoteRecordBeet,
  proposalMetadataDiscriminator,
  proposalMetadataBeet,
  stakeConfigDiscriminator,
  stakeConfigBeet,
  stakeRecordDiscriminator,
  stakeRecordBeet,
  treasuryDataDiscriminator,
  treasuryDataBeet,
  universeMetadataDiscriminator,
  universeMetadataBeet,
} from './solita/index.js'

export enum AccountType {
  ClubData = 'ClubData',
  WhitelistingData = 'WhitelistingData',
  Admins = 'Admins',
  ClubVault = 'ClubVault',
  ClubVaultData = 'ClubVaultData',
  Withdrawal = 'Withdrawal',
  WithdrawalData = 'WithdrawalData',
  FundraiseConfig = 'FundraiseConfig',
  FinancialRecord = 'FinancialRecord',
  FinancialRecordOffer = 'FinancialRecordOffer',
  MaxVoterWeightRecord = 'MaxVoterWeightRecord',
  VoterWeightRecord = 'VoterWeightRecord',
  AllowedMemberData = 'AllowedMemberData',
  NftVoteRecord = 'NftVoteRecord',
  ProposalMetadata = 'ProposalMetadata',
  StakeConfig = 'StakeConfig',
  StakeRecord = 'StakeRecord',
  TreasuryData = 'TreasuryData',
  UniverseMetadata = 'UniverseMetadata',
}

export const ACCOUNT_DISCRIMINATOR: Record<AccountType, Buffer> = {
  [AccountType.ClubData]: Buffer.from(clubDataDiscriminator),
  [AccountType.WhitelistingData]: Buffer.from(whitelistingDataDiscriminator),
  [AccountType.Admins]: Buffer.from(adminsDiscriminator),
  [AccountType.ClubVault]: Buffer.from(clubVaultDiscriminator),
  [AccountType.ClubVaultData]: Buffer.from(clubVaultDataDiscriminator),
  [AccountType.Withdrawal]: Buffer.from(withdrawalDiscriminator),
  [AccountType.WithdrawalData]: Buffer.from(withdrawalDataDiscriminator),
  [AccountType.FundraiseConfig]: Buffer.from(fundraiseConfigDiscriminator),
  [AccountType.FinancialRecord]: Buffer.from(financialRecordDiscriminator),
  [AccountType.FinancialRecordOffer]: Buffer.from(
    financialRecordOfferDiscriminator,
  ),
  [AccountType.MaxVoterWeightRecord]: Buffer.from(
    maxVoterWeightRecordDiscriminator,
  ),
  [AccountType.VoterWeightRecord]: Buffer.from(voterWeightRecordDiscriminator),
  [AccountType.AllowedMemberData]: Buffer.from(allowedMemberDataDiscriminator),
  [AccountType.NftVoteRecord]: Buffer.from(nftVoteRecordDiscriminator),
  [AccountType.ProposalMetadata]: Buffer.from(proposalMetadataDiscriminator),
  [AccountType.StakeConfig]: Buffer.from(stakeConfigDiscriminator),
  [AccountType.StakeRecord]: Buffer.from(stakeRecordDiscriminator),
  [AccountType.TreasuryData]: Buffer.from(treasuryDataDiscriminator),
  [AccountType.UniverseMetadata]: Buffer.from(universeMetadataDiscriminator),
}

export const ACCOUNTS_DATA_LAYOUT: Record<AccountType, any> = {
  [AccountType.ClubData]: clubDataBeet,
  [AccountType.WhitelistingData]: whitelistingDataBeet,
  [AccountType.Admins]: adminsBeet,
  [AccountType.ClubVault]: clubVaultBeet,
  [AccountType.ClubVaultData]: clubVaultDataBeet,
  [AccountType.Withdrawal]: withdrawalBeet,
  [AccountType.WithdrawalData]: withdrawalDataBeet,
  [AccountType.FundraiseConfig]: fundraiseConfigBeet,
  [AccountType.FinancialRecord]: financialRecordBeet,
  [AccountType.FinancialRecordOffer]: financialRecordOfferBeet,
  [AccountType.MaxVoterWeightRecord]: maxVoterWeightRecordBeet,
  [AccountType.VoterWeightRecord]: voterWeightRecordBeet,
  [AccountType.AllowedMemberData]: allowedMemberDataBeet,
  [AccountType.NftVoteRecord]: nftVoteRecordBeet,
  [AccountType.ProposalMetadata]: proposalMetadataBeet,
  [AccountType.StakeConfig]: stakeConfigBeet,
  [AccountType.StakeRecord]: stakeRecordBeet,
  [AccountType.TreasuryData]: treasuryDataBeet,
  [AccountType.UniverseMetadata]: universeMetadataBeet,
}
