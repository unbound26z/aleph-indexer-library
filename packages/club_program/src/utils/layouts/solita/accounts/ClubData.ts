/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { ClubType, clubTypeBeet } from '../types/ClubType.js'
import { RoleConfig, roleConfigBeet } from '../types/RoleConfig.js'
import { KycConfig, kycConfigBeet } from '../types/KycConfig.js'

/**
 * Arguments used to create {@link ClubData}
 * @category Accounts
 * @category generated
 */
export type ClubDataArgs = {
  authority: web3.PublicKey
  realm: web3.PublicKey
  name: string
  slotCreated: beet.bignum
  clubType: ClubType
  roleConfig: RoleConfig[]
  treasuryCount: number
  stakeCount: number
  activeStakeCount: number
  hasActiveStaking: boolean
  numberOfMembers: number
  defaultRole: beet.COption<string>
  kycConfig: beet.COption<KycConfig>
}

export const clubDataDiscriminator = [45, 185, 131, 72, 232, 157, 87, 124]
/**
 * Holds the data for the {@link ClubData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ClubData implements ClubDataArgs {
  private constructor(
    readonly authority: web3.PublicKey,
    readonly realm: web3.PublicKey,
    readonly name: string,
    readonly slotCreated: beet.bignum,
    readonly clubType: ClubType,
    readonly roleConfig: RoleConfig[],
    readonly treasuryCount: number,
    readonly stakeCount: number,
    readonly activeStakeCount: number,
    readonly hasActiveStaking: boolean,
    readonly numberOfMembers: number,
    readonly defaultRole: beet.COption<string>,
    readonly kycConfig: beet.COption<KycConfig>,
  ) {}

  /**
   * Creates a {@link ClubData} instance from the provided args.
   */
  static fromArgs(args: ClubDataArgs) {
    return new ClubData(
      args.authority,
      args.realm,
      args.name,
      args.slotCreated,
      args.clubType,
      args.roleConfig,
      args.treasuryCount,
      args.stakeCount,
      args.activeStakeCount,
      args.hasActiveStaking,
      args.numberOfMembers,
      args.defaultRole,
      args.kycConfig,
    )
  }

  /**
   * Deserializes the {@link ClubData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ClubData, number] {
    return ClubData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ClubData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<ClubData> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find ClubData account at ${address}`)
    }
    return ClubData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, clubDataBeet)
  }

  /**
   * Deserializes the {@link ClubData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ClubData, number] {
    return clubDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ClubData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return clubDataBeet.serialize({
      accountDiscriminator: clubDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ClubData} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ClubDataArgs) {
    const instance = ClubData.fromArgs(args)
    return clubDataBeet.toFixedFromValue({
      accountDiscriminator: clubDataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ClubData} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ClubDataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ClubData.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link ClubData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      authority: this.authority.toBase58(),
      realm: this.realm.toBase58(),
      name: this.name,
      slotCreated: (() => {
        const x = <{ toNumber: () => number }>this.slotCreated
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      clubType: 'ClubType.' + ClubType[this.clubType],
      roleConfig: this.roleConfig,
      treasuryCount: this.treasuryCount,
      stakeCount: this.stakeCount,
      activeStakeCount: this.activeStakeCount,
      hasActiveStaking: this.hasActiveStaking,
      numberOfMembers: this.numberOfMembers,
      defaultRole: this.defaultRole,
      kycConfig: this.kycConfig,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const clubDataBeet = new beet.FixableBeetStruct<
  ClubData,
  ClubDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['authority', beetSolana.publicKey],
    ['realm', beetSolana.publicKey],
    ['name', beet.utf8String],
    ['slotCreated', beet.u64],
    ['clubType', clubTypeBeet],
    ['roleConfig', beet.array(roleConfigBeet)],
    ['treasuryCount', beet.u32],
    ['stakeCount', beet.u32],
    ['activeStakeCount', beet.u32],
    ['hasActiveStaking', beet.bool],
    ['numberOfMembers', beet.u32],
    ['defaultRole', beet.coption(beet.utf8String)],
    ['kycConfig', beet.coption(kycConfigBeet)],
  ],
  ClubData.fromArgs,
  'ClubData',
)
