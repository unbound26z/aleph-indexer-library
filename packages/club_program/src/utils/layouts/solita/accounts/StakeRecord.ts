/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link StakeRecord}
 * @category Accounts
 * @category generated
 */
export type StakeRecordArgs = {
  stakeOwner: web3.PublicKey
  amount: beet.bignum
  hasClaimed: boolean
  claimAmount: beet.bignum
  hasUnstaked: boolean
  unstakePeriodEnd: beet.COption<beet.bignum>
  stakeConfig: web3.PublicKey
}

export const stakeRecordDiscriminator = [174, 163, 11, 208, 150, 236, 11, 205]
/**
 * Holds the data for the {@link StakeRecord} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StakeRecord implements StakeRecordArgs {
  private constructor(
    readonly stakeOwner: web3.PublicKey,
    readonly amount: beet.bignum,
    readonly hasClaimed: boolean,
    readonly claimAmount: beet.bignum,
    readonly hasUnstaked: boolean,
    readonly unstakePeriodEnd: beet.COption<beet.bignum>,
    readonly stakeConfig: web3.PublicKey,
  ) {}

  /**
   * Creates a {@link StakeRecord} instance from the provided args.
   */
  static fromArgs(args: StakeRecordArgs) {
    return new StakeRecord(
      args.stakeOwner,
      args.amount,
      args.hasClaimed,
      args.claimAmount,
      args.hasUnstaked,
      args.unstakePeriodEnd,
      args.stakeConfig,
    )
  }

  /**
   * Deserializes the {@link StakeRecord} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [StakeRecord, number] {
    return StakeRecord.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StakeRecord} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<StakeRecord> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find StakeRecord account at ${address}`)
    }
    return StakeRecord.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, stakeRecordBeet)
  }

  /**
   * Deserializes the {@link StakeRecord} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StakeRecord, number] {
    return stakeRecordBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StakeRecord} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return stakeRecordBeet.serialize({
      accountDiscriminator: stakeRecordDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StakeRecord} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: StakeRecordArgs) {
    const instance = StakeRecord.fromArgs(args)
    return stakeRecordBeet.toFixedFromValue({
      accountDiscriminator: stakeRecordDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StakeRecord} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: StakeRecordArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StakeRecord.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link StakeRecord} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      stakeOwner: this.stakeOwner.toBase58(),
      amount: (() => {
        const x = <{ toNumber: () => number }>this.amount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      hasClaimed: this.hasClaimed,
      claimAmount: (() => {
        const x = <{ toNumber: () => number }>this.claimAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      hasUnstaked: this.hasUnstaked,
      unstakePeriodEnd: this.unstakePeriodEnd,
      stakeConfig: this.stakeConfig.toBase58(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const stakeRecordBeet = new beet.FixableBeetStruct<
  StakeRecord,
  StakeRecordArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['stakeOwner', beetSolana.publicKey],
    ['amount', beet.u64],
    ['hasClaimed', beet.bool],
    ['claimAmount', beet.u64],
    ['hasUnstaked', beet.bool],
    ['unstakePeriodEnd', beet.coption(beet.i64)],
    ['stakeConfig', beetSolana.publicKey],
  ],
  StakeRecord.fromArgs,
  'StakeRecord',
)
