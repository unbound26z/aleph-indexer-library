/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { Allocation, allocationBeet } from '../types/Allocation.js'

/**
 * Arguments used to create {@link FundraiseConfig}
 * @category Accounts
 * @category generated
 */
export type FundraiseConfigArgs = {
  treasury: web3.PublicKey
  capAmount: beet.bignum
  raisedAmount: beet.bignum
  isActive: boolean
  fundraiseIndex: number
  allocation: beet.COption<Allocation>
}

export const fundraiseConfigDiscriminator = [
  184, 185, 150, 204, 17, 91, 238, 80,
]
/**
 * Holds the data for the {@link FundraiseConfig} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class FundraiseConfig implements FundraiseConfigArgs {
  private constructor(
    readonly treasury: web3.PublicKey,
    readonly capAmount: beet.bignum,
    readonly raisedAmount: beet.bignum,
    readonly isActive: boolean,
    readonly fundraiseIndex: number,
    readonly allocation: beet.COption<Allocation>,
  ) {}

  /**
   * Creates a {@link FundraiseConfig} instance from the provided args.
   */
  static fromArgs(args: FundraiseConfigArgs) {
    return new FundraiseConfig(
      args.treasury,
      args.capAmount,
      args.raisedAmount,
      args.isActive,
      args.fundraiseIndex,
      args.allocation,
    )
  }

  /**
   * Deserializes the {@link FundraiseConfig} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [FundraiseConfig, number] {
    return FundraiseConfig.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link FundraiseConfig} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<FundraiseConfig> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find FundraiseConfig account at ${address}`)
    }
    return FundraiseConfig.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, fundraiseConfigBeet)
  }

  /**
   * Deserializes the {@link FundraiseConfig} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [FundraiseConfig, number] {
    return fundraiseConfigBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link FundraiseConfig} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return fundraiseConfigBeet.serialize({
      accountDiscriminator: fundraiseConfigDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link FundraiseConfig} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: FundraiseConfigArgs) {
    const instance = FundraiseConfig.fromArgs(args)
    return fundraiseConfigBeet.toFixedFromValue({
      accountDiscriminator: fundraiseConfigDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link FundraiseConfig} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: FundraiseConfigArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      FundraiseConfig.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link FundraiseConfig} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      treasury: this.treasury.toBase58(),
      capAmount: (() => {
        const x = <{ toNumber: () => number }>this.capAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      raisedAmount: (() => {
        const x = <{ toNumber: () => number }>this.raisedAmount
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      isActive: this.isActive,
      fundraiseIndex: this.fundraiseIndex,
      allocation: this.allocation,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const fundraiseConfigBeet = new beet.FixableBeetStruct<
  FundraiseConfig,
  FundraiseConfigArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['treasury', beetSolana.publicKey],
    ['capAmount', beet.u64],
    ['raisedAmount', beet.u64],
    ['isActive', beet.bool],
    ['fundraiseIndex', beet.u32],
    ['allocation', beet.coption(allocationBeet)],
  ],
  FundraiseConfig.fromArgs,
  'FundraiseConfig',
)
