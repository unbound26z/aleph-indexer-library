/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { SellPermission, sellPermissionBeet } from '../types/SellPermission.js'
import { ReservedRights, reservedRightsBeet } from '../types/ReservedRights.js'

/**
 * Arguments used to create {@link TreasuryData}
 * @category Accounts
 * @category generated
 */
export type TreasuryDataArgs = {
  fundraiseCount: number
  treasury: web3.PublicKey
  hasActiveFundraise: boolean
  governance: web3.PublicKey
  maxVoterWeight: beet.bignum
  totalFinancialPower: beet.bignum
  denominatedCurrency: beet.COption<web3.PublicKey>
  financialTokenAccount: beet.COption<web3.PublicKey>
  sellPermission: SellPermission[] /* size: 10 */
  withdrawalGovernance: beet.COption<web3.PublicKey>
  financialRecordCount: number
  treasuryIndex: number
  financialOffersCount: number
  transferGovernance: beet.COption<web3.PublicKey>
  changeClubConfigGovernance: beet.COption<web3.PublicKey>
  hasActiveUpdateGovernanceConfig: boolean
  clubData: web3.PublicKey
  reservedRights: beet.COption<ReservedRights>
}

export const treasuryDataDiscriminator = [73, 12, 230, 7, 66, 226, 146, 109]
/**
 * Holds the data for the {@link TreasuryData} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class TreasuryData implements TreasuryDataArgs {
  private constructor(
    readonly fundraiseCount: number,
    readonly treasury: web3.PublicKey,
    readonly hasActiveFundraise: boolean,
    readonly governance: web3.PublicKey,
    readonly maxVoterWeight: beet.bignum,
    readonly totalFinancialPower: beet.bignum,
    readonly denominatedCurrency: beet.COption<web3.PublicKey>,
    readonly financialTokenAccount: beet.COption<web3.PublicKey>,
    readonly sellPermission: SellPermission[] /* size: 10 */,
    readonly withdrawalGovernance: beet.COption<web3.PublicKey>,
    readonly financialRecordCount: number,
    readonly treasuryIndex: number,
    readonly financialOffersCount: number,
    readonly transferGovernance: beet.COption<web3.PublicKey>,
    readonly changeClubConfigGovernance: beet.COption<web3.PublicKey>,
    readonly hasActiveUpdateGovernanceConfig: boolean,
    readonly clubData: web3.PublicKey,
    readonly reservedRights: beet.COption<ReservedRights>,
  ) {}

  /**
   * Creates a {@link TreasuryData} instance from the provided args.
   */
  static fromArgs(args: TreasuryDataArgs) {
    return new TreasuryData(
      args.fundraiseCount,
      args.treasury,
      args.hasActiveFundraise,
      args.governance,
      args.maxVoterWeight,
      args.totalFinancialPower,
      args.denominatedCurrency,
      args.financialTokenAccount,
      args.sellPermission,
      args.withdrawalGovernance,
      args.financialRecordCount,
      args.treasuryIndex,
      args.financialOffersCount,
      args.transferGovernance,
      args.changeClubConfigGovernance,
      args.hasActiveUpdateGovernanceConfig,
      args.clubData,
      args.reservedRights,
    )
  }

  /**
   * Deserializes the {@link TreasuryData} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [TreasuryData, number] {
    return TreasuryData.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link TreasuryData} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<TreasuryData> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find TreasuryData account at ${address}`)
    }
    return TreasuryData.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, treasuryDataBeet)
  }

  /**
   * Deserializes the {@link TreasuryData} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [TreasuryData, number] {
    return treasuryDataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link TreasuryData} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return treasuryDataBeet.serialize({
      accountDiscriminator: treasuryDataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link TreasuryData} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: TreasuryDataArgs) {
    const instance = TreasuryData.fromArgs(args)
    return treasuryDataBeet.toFixedFromValue({
      accountDiscriminator: treasuryDataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link TreasuryData} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: TreasuryDataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      TreasuryData.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link TreasuryData} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      fundraiseCount: this.fundraiseCount,
      treasury: this.treasury.toBase58(),
      hasActiveFundraise: this.hasActiveFundraise,
      governance: this.governance.toBase58(),
      maxVoterWeight: (() => {
        const x = <{ toNumber: () => number }>this.maxVoterWeight
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      totalFinancialPower: (() => {
        const x = <{ toNumber: () => number }>this.totalFinancialPower
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      denominatedCurrency: this.denominatedCurrency,
      financialTokenAccount: this.financialTokenAccount,
      sellPermission: this.sellPermission,
      withdrawalGovernance: this.withdrawalGovernance,
      financialRecordCount: this.financialRecordCount,
      treasuryIndex: this.treasuryIndex,
      financialOffersCount: this.financialOffersCount,
      transferGovernance: this.transferGovernance,
      changeClubConfigGovernance: this.changeClubConfigGovernance,
      hasActiveUpdateGovernanceConfig: this.hasActiveUpdateGovernanceConfig,
      clubData: this.clubData.toBase58(),
      reservedRights: this.reservedRights,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const treasuryDataBeet = new beet.FixableBeetStruct<
  TreasuryData,
  TreasuryDataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['fundraiseCount', beet.u32],
    ['treasury', beetSolana.publicKey],
    ['hasActiveFundraise', beet.bool],
    ['governance', beetSolana.publicKey],
    ['maxVoterWeight', beet.u64],
    ['totalFinancialPower', beet.u64],
    ['denominatedCurrency', beet.coption(beetSolana.publicKey)],
    ['financialTokenAccount', beet.coption(beetSolana.publicKey)],
    ['sellPermission', beet.uniformFixedSizeArray(sellPermissionBeet, 10)],
    ['withdrawalGovernance', beet.coption(beetSolana.publicKey)],
    ['financialRecordCount', beet.u32],
    ['treasuryIndex', beet.u32],
    ['financialOffersCount', beet.u32],
    ['transferGovernance', beet.coption(beetSolana.publicKey)],
    ['changeClubConfigGovernance', beet.coption(beetSolana.publicKey)],
    ['hasActiveUpdateGovernanceConfig', beet.bool],
    ['clubData', beetSolana.publicKey],
    ['reservedRights', beet.coption(reservedRightsBeet)],
  ],
  TreasuryData.fromArgs,
  'TreasuryData',
)
