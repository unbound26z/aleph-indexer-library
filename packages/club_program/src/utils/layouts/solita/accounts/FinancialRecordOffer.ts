/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link FinancialRecordOffer}
 * @category Accounts
 * @category generated
 */
export type FinancialRecordOfferArgs = {
  treasury: web3.PublicKey
  financialRecord: web3.PublicKey
  amountOfRights: beet.bignum
  price: beet.bignum
  seller: web3.PublicKey
  wantedTokenMint: beet.COption<web3.PublicKey>
  buyer: beet.COption<web3.PublicKey>
  financialIndex: number
  initialAmountOfRights: beet.bignum
}

export const financialRecordOfferDiscriminator = [
  93, 232, 66, 219, 91, 67, 204, 50,
]
/**
 * Holds the data for the {@link FinancialRecordOffer} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class FinancialRecordOffer implements FinancialRecordOfferArgs {
  private constructor(
    readonly treasury: web3.PublicKey,
    readonly financialRecord: web3.PublicKey,
    readonly amountOfRights: beet.bignum,
    readonly price: beet.bignum,
    readonly seller: web3.PublicKey,
    readonly wantedTokenMint: beet.COption<web3.PublicKey>,
    readonly buyer: beet.COption<web3.PublicKey>,
    readonly financialIndex: number,
    readonly initialAmountOfRights: beet.bignum,
  ) {}

  /**
   * Creates a {@link FinancialRecordOffer} instance from the provided args.
   */
  static fromArgs(args: FinancialRecordOfferArgs) {
    return new FinancialRecordOffer(
      args.treasury,
      args.financialRecord,
      args.amountOfRights,
      args.price,
      args.seller,
      args.wantedTokenMint,
      args.buyer,
      args.financialIndex,
      args.initialAmountOfRights,
    )
  }

  /**
   * Deserializes the {@link FinancialRecordOffer} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [FinancialRecordOffer, number] {
    return FinancialRecordOffer.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link FinancialRecordOffer} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<FinancialRecordOffer> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(
        `Unable to find FinancialRecordOffer account at ${address}`,
      )
    }
    return FinancialRecordOffer.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, financialRecordOfferBeet)
  }

  /**
   * Deserializes the {@link FinancialRecordOffer} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [FinancialRecordOffer, number] {
    return financialRecordOfferBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link FinancialRecordOffer} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return financialRecordOfferBeet.serialize({
      accountDiscriminator: financialRecordOfferDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link FinancialRecordOffer} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: FinancialRecordOfferArgs) {
    const instance = FinancialRecordOffer.fromArgs(args)
    return financialRecordOfferBeet.toFixedFromValue({
      accountDiscriminator: financialRecordOfferDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link FinancialRecordOffer} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: FinancialRecordOfferArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      FinancialRecordOffer.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link FinancialRecordOffer} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      treasury: this.treasury.toBase58(),
      financialRecord: this.financialRecord.toBase58(),
      amountOfRights: (() => {
        const x = <{ toNumber: () => number }>this.amountOfRights
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      price: (() => {
        const x = <{ toNumber: () => number }>this.price
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      seller: this.seller.toBase58(),
      wantedTokenMint: this.wantedTokenMint,
      buyer: this.buyer,
      financialIndex: this.financialIndex,
      initialAmountOfRights: (() => {
        const x = <{ toNumber: () => number }>this.initialAmountOfRights
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const financialRecordOfferBeet = new beet.FixableBeetStruct<
  FinancialRecordOffer,
  FinancialRecordOfferArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['treasury', beetSolana.publicKey],
    ['financialRecord', beetSolana.publicKey],
    ['amountOfRights', beet.u64],
    ['price', beet.u64],
    ['seller', beetSolana.publicKey],
    ['wantedTokenMint', beet.coption(beetSolana.publicKey)],
    ['buyer', beet.coption(beetSolana.publicKey)],
    ['financialIndex', beet.u32],
    ['initialAmountOfRights', beet.u64],
  ],
  FinancialRecordOffer.fromArgs,
  'FinancialRecordOffer',
)
