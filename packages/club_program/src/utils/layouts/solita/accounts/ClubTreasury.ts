// /**
//  * This code was GENERATED using the solita package.
//  * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
//  *
//  * See: https://github.com/metaplex-foundation/solita
//  */

// import * as web3 from '@solana/web3.js'
// import * as beet from '@metaplex-foundation/beet'
// import * as beetSolana from '@metaplex-foundation/beet-solana'

// /**
//  * Arguments used to create {@link ClubTreasury}
//  * @category Accounts
//  * @category generated
//  */
// export type ClubTreasuryArgs = {}

// export const clubTreasuryDiscriminator = [188, 32, 193, 33, 159, 38, 40, 26]
// /**
//  * Holds the data for the {@link ClubTreasury} Account and provides de/serialization
//  * functionality for that data
//  *
//  * @category Accounts
//  * @category generated
//  */
// export class ClubTreasury implements ClubTreasuryArgs {
//   private constructor() {}

//   /**
//    * Creates a {@link ClubTreasury} instance from the provided args.
//    */
//   static fromArgs(args: ClubTreasuryArgs) {
//     return new ClubTreasury()
//   }

//   /**
//    * Deserializes the {@link ClubTreasury} from the data of the provided {@link web3.AccountInfo}.
//    * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
//    */
//   static fromAccountInfo(
//     accountInfo: web3.AccountInfo<Buffer>,
//     offset = 0,
//   ): [ClubTreasury, number] {
//     return ClubTreasury.deserialize(accountInfo.data, offset)
//   }

//   /**
//    * Retrieves the account info from the provided address and deserializes
//    * the {@link ClubTreasury} from its data.
//    *
//    * @throws Error if no account info is found at the address or if deserialization fails
//    */
//   static async fromAccountAddress(
//     connection: web3.Connection,
//     address: web3.PublicKey,
//     commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
//   ): Promise<ClubTreasury> {
//     const accountInfo = await connection.getAccountInfo(
//       address,
//       commitmentOrConfig,
//     )
//     if (accountInfo == null) {
//       throw new Error(`Unable to find ClubTreasury account at ${address}`)
//     }
//     return ClubTreasury.fromAccountInfo(accountInfo, 0)[0]
//   }

//   /**
//    * Provides a {@link web3.Connection.getProgramAccounts} config builder,
//    * to fetch accounts matching filters that can be specified via that builder.
//    *
//    * @param programId - the program that owns the accounts we are filtering
//    */
//   static gpaBuilder(
//     programId: web3.PublicKey = new web3.PublicKey(
//       'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
//     ),
//   ) {
//     return beetSolana.GpaBuilder.fromStruct(programId, clubTreasuryBeet)
//   }

//   /**
//    * Deserializes the {@link ClubTreasury} from the provided data Buffer.
//    * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
//    */
//   static deserialize(buf: Buffer, offset = 0): [ClubTreasury, number] {
//     return clubTreasuryBeet.deserialize(buf, offset)
//   }

//   /**
//    * Serializes the {@link ClubTreasury} into a Buffer.
//    * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
//    */
//   serialize(): [Buffer, number] {
//     return clubTreasuryBeet.serialize({
//       accountDiscriminator: clubTreasuryDiscriminator,
//       ...this,
//     })
//   }

//   /**
//    * Returns the byteSize of a {@link Buffer} holding the serialized data of
//    * {@link ClubTreasury}
//    */
//   static get byteSize() {
//     return clubTreasuryBeet.byteSize
//   }

//   /**
//    * Fetches the minimum balance needed to exempt an account holding
//    * {@link ClubTreasury} data from rent
//    *
//    * @param connection used to retrieve the rent exemption information
//    */
//   static async getMinimumBalanceForRentExemption(
//     connection: web3.Connection,
//     commitment?: web3.Commitment,
//   ): Promise<number> {
//     return connection.getMinimumBalanceForRentExemption(
//       ClubTreasury.byteSize,
//       commitment,
//     )
//   }

//   /**
//    * Determines if the provided {@link Buffer} has the correct byte size to
//    * hold {@link ClubTreasury} data.
//    */
//   static hasCorrectByteSize(buf: Buffer, offset = 0) {
//     return buf.byteLength - offset === ClubTreasury.byteSize
//   }

//   /**
//    * Returns a readable version of {@link ClubTreasury} properties
//    * and can be used to convert to JSON and/or logging
//    */
//   pretty() {
//     return {}
//   }
// }

// /**
//  * @category Accounts
//  * @category generated
//  */
// export const clubTreasuryBeet = new beet.BeetStruct<
//   ClubTreasury,
//   { accountDiscriminator: number[] /* size: 8 */ }
// >(
//   [['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
//   ClubTreasury.fromArgs,
//   'ClubTreasury',
// )
