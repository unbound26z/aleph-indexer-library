/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { ProposalType, proposalTypeBeet } from '../types/ProposalType.js'
import { ProposalStatus, proposalStatusBeet } from '../types/ProposalStatus.js'

/**
 * Arguments used to create {@link ProposalMetadata}
 * @category Accounts
 * @category generated
 */
export type ProposalMetadataArgs = {
  name: string
  options: string[]
  authority: web3.PublicKey
  discussionLink: string
  treasury: web3.PublicKey
  currentFundraiseIndex: number
  totalFinancialPower: beet.bignum
  proposal: web3.PublicKey
  proposalIndex: number
  realm: web3.PublicKey
  clubData: web3.PublicKey
  governance: web3.PublicKey
  isCreated: boolean
  description: string
  authorityRole: string
  dataPda: beet.COption<web3.PublicKey>
  proposalType: ProposalType
  proposalStatus: ProposalStatus
  approvalQuorumPercentage: number
  maxVoterWeight: beet.COption<beet.bignum>
  createdAt: beet.bignum
}

export const proposalMetadataDiscriminator = [
  167, 148, 101, 97, 238, 90, 71, 247,
]
/**
 * Holds the data for the {@link ProposalMetadata} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class ProposalMetadata implements ProposalMetadataArgs {
  private constructor(
    readonly name: string,
    readonly options: string[],
    readonly authority: web3.PublicKey,
    readonly discussionLink: string,
    readonly treasury: web3.PublicKey,
    readonly currentFundraiseIndex: number,
    readonly totalFinancialPower: beet.bignum,
    readonly proposal: web3.PublicKey,
    readonly proposalIndex: number,
    readonly realm: web3.PublicKey,
    readonly clubData: web3.PublicKey,
    readonly governance: web3.PublicKey,
    readonly isCreated: boolean,
    readonly description: string,
    readonly authorityRole: string,
    readonly dataPda: beet.COption<web3.PublicKey>,
    readonly proposalType: ProposalType,
    readonly proposalStatus: ProposalStatus,
    readonly approvalQuorumPercentage: number,
    readonly maxVoterWeight: beet.COption<beet.bignum>,
    readonly createdAt: beet.bignum,
  ) {}

  /**
   * Creates a {@link ProposalMetadata} instance from the provided args.
   */
  static fromArgs(args: ProposalMetadataArgs) {
    return new ProposalMetadata(
      args.name,
      args.options,
      args.authority,
      args.discussionLink,
      args.treasury,
      args.currentFundraiseIndex,
      args.totalFinancialPower,
      args.proposal,
      args.proposalIndex,
      args.realm,
      args.clubData,
      args.governance,
      args.isCreated,
      args.description,
      args.authorityRole,
      args.dataPda,
      args.proposalType,
      args.proposalStatus,
      args.approvalQuorumPercentage,
      args.maxVoterWeight,
      args.createdAt,
    )
  }

  /**
   * Deserializes the {@link ProposalMetadata} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [ProposalMetadata, number] {
    return ProposalMetadata.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link ProposalMetadata} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig,
  ): Promise<ProposalMetadata> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig,
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find ProposalMetadata account at ${address}`)
    }
    return ProposalMetadata.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe',
    ),
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, proposalMetadataBeet)
  }

  /**
   * Deserializes the {@link ProposalMetadata} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [ProposalMetadata, number] {
    return proposalMetadataBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link ProposalMetadata} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return proposalMetadataBeet.serialize({
      accountDiscriminator: proposalMetadataDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link ProposalMetadata} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: ProposalMetadataArgs) {
    const instance = ProposalMetadata.fromArgs(args)
    return proposalMetadataBeet.toFixedFromValue({
      accountDiscriminator: proposalMetadataDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link ProposalMetadata} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: ProposalMetadataArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      ProposalMetadata.byteSize(args),
      commitment,
    )
  }

  /**
   * Returns a readable version of {@link ProposalMetadata} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      name: this.name,
      options: this.options,
      authority: this.authority.toBase58(),
      discussionLink: this.discussionLink,
      treasury: this.treasury.toBase58(),
      currentFundraiseIndex: this.currentFundraiseIndex,
      totalFinancialPower: (() => {
        const x = <{ toNumber: () => number }>this.totalFinancialPower
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      proposal: this.proposal.toBase58(),
      proposalIndex: this.proposalIndex,
      realm: this.realm.toBase58(),
      clubData: this.clubData.toBase58(),
      governance: this.governance.toBase58(),
      isCreated: this.isCreated,
      description: this.description,
      authorityRole: this.authorityRole,
      dataPda: this.dataPda,
      proposalType: 'ProposalType.' + ProposalType[this.proposalType],
      proposalStatus: 'ProposalStatus.' + ProposalStatus[this.proposalStatus],
      approvalQuorumPercentage: this.approvalQuorumPercentage,
      maxVoterWeight: this.maxVoterWeight,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const proposalMetadataBeet = new beet.FixableBeetStruct<
  ProposalMetadata,
  ProposalMetadataArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['name', beet.utf8String],
    ['options', beet.array(beet.utf8String)],
    ['authority', beetSolana.publicKey],
    ['discussionLink', beet.utf8String],
    ['treasury', beetSolana.publicKey],
    ['currentFundraiseIndex', beet.u32],
    ['totalFinancialPower', beet.u64],
    ['proposal', beetSolana.publicKey],
    ['proposalIndex', beet.u32],
    ['realm', beetSolana.publicKey],
    ['clubData', beetSolana.publicKey],
    ['governance', beetSolana.publicKey],
    ['isCreated', beet.bool],
    ['description', beet.utf8String],
    ['authorityRole', beet.utf8String],
    ['dataPda', beet.coption(beetSolana.publicKey)],
    ['proposalType', proposalTypeBeet],
    ['proposalStatus', proposalStatusBeet],
    ['approvalQuorumPercentage', beet.u8],
    ['maxVoterWeight', beet.coption(beet.u64)],
    ['createdAt', beet.i64],
  ],
  ProposalMetadata.fromArgs,
  'ProposalMetadata',
)
