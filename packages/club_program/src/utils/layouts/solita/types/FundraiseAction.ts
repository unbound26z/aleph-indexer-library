/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link FundraiseAction} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link FundraiseAction} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type FundraiseActionRecord = {
  Create: { fields: [beet.bignum] }
  Finish: void /* scalar variant */
}

/**
 * Union type respresenting the FundraiseAction data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isFundraiseAction*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type FundraiseAction = beet.DataEnumKeyAsKind<FundraiseActionRecord>

export const isFundraiseActionCreate = (
  x: FundraiseAction,
): x is FundraiseAction & { __kind: 'Create' } => x.__kind === 'Create'
export const isFundraiseActionFinish = (
  x: FundraiseAction,
): x is FundraiseAction & { __kind: 'Finish' } => x.__kind === 'Finish'

/**
 * @category userTypes
 * @category generated
 */
export const fundraiseActionBeet = beet.dataEnum<FundraiseActionRecord>([
  [
    'Create',
    new beet.BeetArgsStruct<FundraiseActionRecord['Create']>(
      [['fields', beet.fixedSizeTuple([beet.u64])]],
      'FundraiseActionRecord["Create"]',
    ),
  ],
  ['Finish', beet.unit],
]) as beet.FixableBeet<FundraiseAction, FundraiseAction>
