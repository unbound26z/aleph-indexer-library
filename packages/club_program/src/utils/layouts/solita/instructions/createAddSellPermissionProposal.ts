/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SellPermissionDto,
  sellPermissionDtoBeet,
} from '../types/SellPermissionDto.js'

/**
 * @category Instructions
 * @category CreateAddSellPermissionProposal
 * @category generated
 */
export type CreateAddSellPermissionProposalInstructionArgs = {
  useDeny: boolean
  sellPermission: SellPermissionDto
  maxVotingTime: number
}
/**
 * @category Instructions
 * @category CreateAddSellPermissionProposal
 * @category generated
 */
export const createAddSellPermissionProposalStruct = new beet.BeetArgsStruct<
  CreateAddSellPermissionProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['useDeny', beet.bool],
    ['sellPermission', sellPermissionDtoBeet],
    ['maxVotingTime', beet.u32],
  ],
  'CreateAddSellPermissionProposalInstructionArgs',
)
/**
 * Accounts required by the _createAddSellPermissionProposal_ instruction
 *
 * @property [_writable_] governance
 * @property [_writable_] realm
 * @property [] governanceAuthority
 * @property [] realmConfig
 * @property [_writable_] proposal
 * @property [_writable_] proposalTransactionAddress
 * @property [_writable_] tokenOwnerRecord
 * @property [] splGovernanceProgram
 * @property [] communityTokenMint
 * @property [_writable_, **signer**] payer
 * @property [] voterWeightRecord
 * @property [] treasuryData
 * @property [] proposalMetadata
 * @property [] clubData
 * @category Instructions
 * @category CreateAddSellPermissionProposal
 * @category generated
 */
export type CreateAddSellPermissionProposalInstructionAccounts = {
  governance: web3.PublicKey
  realm: web3.PublicKey
  governanceAuthority: web3.PublicKey
  realmConfig: web3.PublicKey
  proposal: web3.PublicKey
  proposalTransactionAddress: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  splGovernanceProgram: web3.PublicKey
  communityTokenMint: web3.PublicKey
  payer: web3.PublicKey
  voterWeightRecord: web3.PublicKey
  treasuryData: web3.PublicKey
  proposalMetadata: web3.PublicKey
  clubData: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAddSellPermissionProposalInstructionDiscriminator = [
  205, 253, 225, 121, 24, 30, 103, 220,
]

/**
 * Creates a _CreateAddSellPermissionProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAddSellPermissionProposal
 * @category generated
 */
export function createCreateAddSellPermissionProposalInstruction(
  accounts: CreateAddSellPermissionProposalInstructionAccounts,
  args: CreateAddSellPermissionProposalInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createAddSellPermissionProposalStruct.serialize({
    instructionDiscriminator:
      createAddSellPermissionProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governanceAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTransactionAddress,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.voterWeightRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
