/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ExecuteSolseaTransaction
 * @category generated
 */
export type ExecuteSolseaTransactionInstructionArgs = {
  action: number
  treasuryIndex: number
  chainId: string
  authorityBump: number
  creatorsCount: beet.COption<number>
  sellerFeeBps: beet.COption<number>
  royalties: beet.COption<number[] /* size: 5 */>
}
/**
 * @category Instructions
 * @category ExecuteSolseaTransaction
 * @category generated
 */
export const executeSolseaTransactionStruct = new beet.FixableBeetArgsStruct<
  ExecuteSolseaTransactionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['action', beet.u8],
    ['treasuryIndex', beet.u32],
    ['chainId', beet.utf8String],
    ['authorityBump', beet.u8],
    ['creatorsCount', beet.coption(beet.u8)],
    ['sellerFeeBps', beet.coption(beet.u16)],
    ['royalties', beet.coption(beet.uniformFixedSizeArray(beet.u8, 5))],
  ],
  'ExecuteSolseaTransactionInstructionArgs',
)
/**
 * Accounts required by the _executeSolseaTransaction_ instruction
 *
 * @property [_writable_] clubData
 * @property [_writable_] offer
 * @property [_writable_] solseaEscrow
 * @property [_writable_] authorityAccount
 * @property [_writable_] solseaProfitAccount
 * @property [_writable_] solseaEscrowTokens
 * @property [_writable_] proposalMetadata
 * @property [_writable_] treasury
 * @property [_writable_] maker
 * @property [_writable_] proposal
 * @property [_writable_] proposalTransaction
 * @property [] memberData
 * @property [] solseaProgram
 * @property [] wantedTokenMint
 * @property [] offeredTokenMint
 * @property [_writable_] escrowWantedToken
 * @property [_writable_] makerWantedToken
 * @property [_writable_] makerOfferedToken
 * @property [_writable_, **signer**] payer
 * @property [] splGovernance
 * @property [_writable_] governance
 * @property [_writable_] profitAccount
 * @property [] escrowProgram
 * @category Instructions
 * @category ExecuteSolseaTransaction
 * @category generated
 */
export type ExecuteSolseaTransactionInstructionAccounts = {
  clubData: web3.PublicKey
  offer: web3.PublicKey
  solseaEscrow: web3.PublicKey
  authorityAccount: web3.PublicKey
  solseaProfitAccount: web3.PublicKey
  solseaEscrowTokens: web3.PublicKey
  proposalMetadata: web3.PublicKey
  treasury: web3.PublicKey
  maker: web3.PublicKey
  proposal: web3.PublicKey
  proposalTransaction: web3.PublicKey
  memberData: web3.PublicKey
  solseaProgram: web3.PublicKey
  wantedTokenMint: web3.PublicKey
  offeredTokenMint: web3.PublicKey
  escrowWantedToken: web3.PublicKey
  makerWantedToken: web3.PublicKey
  makerOfferedToken: web3.PublicKey
  payer: web3.PublicKey
  splGovernance: web3.PublicKey
  governance: web3.PublicKey
  profitAccount: web3.PublicKey
  escrowProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeSolseaTransactionInstructionDiscriminator = [
  14, 115, 116, 47, 182, 200, 100, 16,
]

/**
 * Creates a _ExecuteSolseaTransaction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExecuteSolseaTransaction
 * @category generated
 */
export function createExecuteSolseaTransactionInstruction(
  accounts: ExecuteSolseaTransactionInstructionAccounts,
  args: ExecuteSolseaTransactionInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = executeSolseaTransactionStruct.serialize({
    instructionDiscriminator: executeSolseaTransactionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.solseaEscrow,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.solseaProfitAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.solseaEscrowTokens,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.maker,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.memberData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.solseaProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wantedTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.offeredTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowWantedToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerWantedToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.makerOfferedToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.splGovernance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.profitAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
