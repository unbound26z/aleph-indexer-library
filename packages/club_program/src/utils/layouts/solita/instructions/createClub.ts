/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { KycConfig, kycConfigBeet } from '../types/KycConfig.js'

/**
 * @category Instructions
 * @category CreateClub
 * @category generated
 */
export type CreateClubInstructionArgs = {
  clubName: string
  clubType: number
  roles: Uint8Array[]
  ownerRole: string
  defaultRole: beet.COption<string>
  kycConfig: beet.COption<KycConfig>
}
/**
 * @category Instructions
 * @category CreateClub
 * @category generated
 */
export const createClubStruct = new beet.FixableBeetArgsStruct<
  CreateClubInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['clubName', beet.utf8String],
    ['clubType', beet.u8],
    ['roles', beet.array(beet.bytes)],
    ['ownerRole', beet.utf8String],
    ['defaultRole', beet.coption(beet.utf8String)],
    ['kycConfig', beet.coption(kycConfigBeet)],
  ],
  'CreateClubInstructionArgs',
)
/**
 * Accounts required by the _createClub_ instruction
 *
 * @property [_writable_] realm
 * @property [] ogRealm
 * @property [_writable_] realmAuthority
 * @property [_writable_] communityTokenHoldingAddress
 * @property [_writable_] realmConfig
 * @property [_writable_] tokenOwnerRecord
 * @property [] splGovernanceProgram
 * @property [] voterWeightProgram
 * @property [_writable_] communityTokenMint
 * @property [_writable_] clubData
 * @property [_writable_] memberData
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateClub
 * @category generated
 */
export type CreateClubInstructionAccounts = {
  realm: web3.PublicKey
  ogRealm: web3.PublicKey
  realmAuthority: web3.PublicKey
  communityTokenHoldingAddress: web3.PublicKey
  realmConfig: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  splGovernanceProgram: web3.PublicKey
  voterWeightProgram: web3.PublicKey
  communityTokenMint: web3.PublicKey
  clubData: web3.PublicKey
  memberData: web3.PublicKey
  payer: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createClubInstructionDiscriminator = [
  245, 213, 68, 31, 171, 94, 42, 103,
]

/**
 * Creates a _CreateClub_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateClub
 * @category generated
 */
export function createCreateClubInstruction(
  accounts: CreateClubInstructionAccounts,
  args: CreateClubInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createClubStruct.serialize({
    instructionDiscriminator: createClubInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.ogRealm,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenHoldingAddress,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.voterWeightProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.memberData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
