/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateSolseaProposal
 * @category generated
 */
export type CreateSolseaProposalInstructionArgs = {
  treasuryIndex: number
  chainId: string
  offeredAmount: beet.bignum
  wantedAmount: beet.bignum
  sellerFeeBps: number
  useDeny: boolean
  action: number
}
/**
 * @category Instructions
 * @category CreateSolseaProposal
 * @category generated
 */
export const createSolseaProposalStruct = new beet.FixableBeetArgsStruct<
  CreateSolseaProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['treasuryIndex', beet.u32],
    ['chainId', beet.utf8String],
    ['offeredAmount', beet.u64],
    ['wantedAmount', beet.u64],
    ['sellerFeeBps', beet.u16],
    ['useDeny', beet.bool],
    ['action', beet.u8],
  ],
  'CreateSolseaProposalInstructionArgs',
)
/**
 * Accounts required by the _createSolseaProposal_ instruction
 *
 * @property [_writable_] realm
 * @property [_writable_] proposal
 * @property [_writable_] proposalTransaction
 * @property [] offer
 * @property [] escrowWantedToken
 * @property [] realmConfig
 * @property [] makerWantedToken
 * @property [] offeredTokenMint
 * @property [] wantedTokenMint
 * @property [_writable_] governance
 * @property [] clubData
 * @property [] proposalMetadata
 * @property [_writable_, **signer**] payer
 * @property [] memberData
 * @property [] communityTokenMint
 * @property [_writable_] treasury
 * @property [] treasuryData
 * @property [_writable_] tokenOwnerRecord
 * @property [] escrowProgram
 * @property [_writable_] voterWeightRecord
 * @property [] splGovernance
 * @category Instructions
 * @category CreateSolseaProposal
 * @category generated
 */
export type CreateSolseaProposalInstructionAccounts = {
  realm: web3.PublicKey
  proposal: web3.PublicKey
  proposalTransaction: web3.PublicKey
  offer: web3.PublicKey
  escrowWantedToken: web3.PublicKey
  realmConfig: web3.PublicKey
  makerWantedToken: web3.PublicKey
  offeredTokenMint: web3.PublicKey
  wantedTokenMint: web3.PublicKey
  governance: web3.PublicKey
  clubData: web3.PublicKey
  proposalMetadata: web3.PublicKey
  payer: web3.PublicKey
  memberData: web3.PublicKey
  communityTokenMint: web3.PublicKey
  treasury: web3.PublicKey
  treasuryData: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  escrowProgram: web3.PublicKey
  voterWeightRecord: web3.PublicKey
  splGovernance: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createSolseaProposalInstructionDiscriminator = [
  5, 129, 232, 142, 38, 16, 48, 196,
]

/**
 * Creates a _CreateSolseaProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateSolseaProposal
 * @category generated
 */
export function createCreateSolseaProposalInstruction(
  accounts: CreateSolseaProposalInstructionAccounts,
  args: CreateSolseaProposalInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createSolseaProposalStruct.serialize({
    instructionDiscriminator: createSolseaProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.offer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowWantedToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.makerWantedToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.offeredTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.wantedTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.memberData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.voterWeightRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernance,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
