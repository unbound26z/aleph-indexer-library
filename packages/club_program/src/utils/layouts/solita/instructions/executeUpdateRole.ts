/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ExecuteUpdateRole
 * @category generated
 */
export const executeUpdateRoleStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ExecuteUpdateRoleInstructionArgs',
)
/**
 * Accounts required by the _executeUpdateRole_ instruction
 *
 * @property [_writable_] clubData
 * @property [] realm
 * @property [_writable_] proposal
 * @property [] treasuryData
 * @property [_writable_] proposalTransaction
 * @property [_writable_] proposalMetadata
 * @property [_writable_] governance
 * @property [] escrowProgram
 * @property [] splGovernanceProgram
 * @category Instructions
 * @category ExecuteUpdateRole
 * @category generated
 */
export type ExecuteUpdateRoleInstructionAccounts = {
  clubData: web3.PublicKey
  realm: web3.PublicKey
  proposal: web3.PublicKey
  treasuryData: web3.PublicKey
  proposalTransaction: web3.PublicKey
  proposalMetadata: web3.PublicKey
  governance: web3.PublicKey
  escrowProgram: web3.PublicKey
  splGovernanceProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeUpdateRoleInstructionDiscriminator = [
  225, 130, 240, 79, 33, 199, 139, 189,
]

/**
 * Creates a _ExecuteUpdateRole_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ExecuteUpdateRole
 * @category generated
 */
export function createExecuteUpdateRoleInstruction(
  accounts: ExecuteUpdateRoleInstructionAccounts,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = executeUpdateRoleStruct.serialize({
    instructionDiscriminator: executeUpdateRoleInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realm,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
