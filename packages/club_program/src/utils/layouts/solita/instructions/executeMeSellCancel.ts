/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ExecuteMeSellCancel
 * @category generated
 */
export type ExecuteMeSellCancelInstructionArgs = {
  data: Uint8Array
}
/**
 * @category Instructions
 * @category ExecuteMeSellCancel
 * @category generated
 */
export const executeMeSellCancelStruct = new beet.FixableBeetArgsStruct<
  ExecuteMeSellCancelInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['data', beet.bytes],
  ],
  'ExecuteMeSellCancelInstructionArgs',
)
/**
 * Accounts required by the _executeMeSellCancel_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [] clubData
 * @property [_writable_] treasury
 * @property [_writable_] vault
 * @property [_writable_] offer
 * @property [_writable_] offeredNftToken
 * @property [] nftMint
 * @property [] escrowProgram
 * @property [] magicEdenExerchina
 * @property [] autExer
 * @property [] e8cExer
 * @property [_writable_] magicEdenState1
 * @property [] magicEdenState2
 * @property [_writable_] onebwExer
 * @property [] magicEden
 * @category Instructions
 * @category ExecuteMeSellCancel
 * @category generated
 */
export type ExecuteMeSellCancelInstructionAccounts = {
  payer: web3.PublicKey
  clubData: web3.PublicKey
  treasury: web3.PublicKey
  vault: web3.PublicKey
  offer: web3.PublicKey
  offeredNftToken: web3.PublicKey
  nftMint: web3.PublicKey
  escrowProgram: web3.PublicKey
  magicEdenExerchina: web3.PublicKey
  autExer: web3.PublicKey
  e8cExer: web3.PublicKey
  magicEdenState1: web3.PublicKey
  magicEdenState2: web3.PublicKey
  onebwExer: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  magicEden: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const executeMeSellCancelInstructionDiscriminator = [
  222, 216, 25, 85, 209, 27, 80, 188,
]

/**
 * Creates a _ExecuteMeSellCancel_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExecuteMeSellCancel
 * @category generated
 */
export function createExecuteMeSellCancelInstruction(
  accounts: ExecuteMeSellCancelInstructionAccounts,
  args: ExecuteMeSellCancelInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = executeMeSellCancelStruct.serialize({
    instructionDiscriminator: executeMeSellCancelInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.clubData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.offeredNftToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.nftMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.magicEdenExerchina,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.autExer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.e8cExer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.magicEdenState1,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.magicEdenState2,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.onebwExer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.magicEden,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
