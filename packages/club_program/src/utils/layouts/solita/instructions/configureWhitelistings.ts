/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import {
  WhitelistingAction,
  whitelistingActionBeet,
} from '../types/WhitelistingAction.js'

/**
 * @category Instructions
 * @category ConfigureWhitelistings
 * @category generated
 */
export type ConfigureWhitelistingsInstructionArgs = {
  whitelistings: web3.PublicKey[]
  whitelistingAction: WhitelistingAction
}
/**
 * @category Instructions
 * @category ConfigureWhitelistings
 * @category generated
 */
export const configureWhitelistingsStruct = new beet.FixableBeetArgsStruct<
  ConfigureWhitelistingsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['whitelistings', beet.array(beetSolana.publicKey)],
    ['whitelistingAction', whitelistingActionBeet],
  ],
  'ConfigureWhitelistingsInstructionArgs',
)
/**
 * Accounts required by the _configureWhitelistings_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [_writable_] whitelistingData
 * @property [] adminsData
 * @category Instructions
 * @category ConfigureWhitelistings
 * @category generated
 */
export type ConfigureWhitelistingsInstructionAccounts = {
  payer: web3.PublicKey
  whitelistingData: web3.PublicKey
  adminsData: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const configureWhitelistingsInstructionDiscriminator = [
  109, 223, 41, 58, 46, 86, 15, 117,
]

/**
 * Creates a _ConfigureWhitelistings_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ConfigureWhitelistings
 * @category generated
 */
export function createConfigureWhitelistingsInstruction(
  accounts: ConfigureWhitelistingsInstructionAccounts,
  args: ConfigureWhitelistingsInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = configureWhitelistingsStruct.serialize({
    instructionDiscriminator: configureWhitelistingsInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.whitelistingData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.adminsData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
