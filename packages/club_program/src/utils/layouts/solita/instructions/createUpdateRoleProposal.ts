/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UpdateRoleWeight,
  updateRoleWeightBeet,
} from '../types/UpdateRoleWeight.js'

/**
 * @category Instructions
 * @category CreateUpdateRoleProposal
 * @category generated
 */
export type CreateUpdateRoleProposalInstructionArgs = {
  roleWeigthConfig: UpdateRoleWeight[]
}
/**
 * @category Instructions
 * @category CreateUpdateRoleProposal
 * @category generated
 */
export const createUpdateRoleProposalStruct = new beet.FixableBeetArgsStruct<
  CreateUpdateRoleProposalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['roleWeigthConfig', beet.array(updateRoleWeightBeet)],
  ],
  'CreateUpdateRoleProposalInstructionArgs',
)
/**
 * Accounts required by the _createUpdateRoleProposal_ instruction
 *
 * @property [_writable_] realm
 * @property [] clubData
 * @property [_writable_] proposal
 * @property [_writable_] proposalTransaction
 * @property [] treasury
 * @property [] treasuryData
 * @property [] memberData
 * @property [] communityMint
 * @property [_writable_] tokenOwnerRecord
 * @property [_writable_, **signer**] payer
 * @property [_writable_] voterWeightRecord
 * @property [_writable_] governance
 * @property [] realmConfig
 * @property [_writable_] proposalMetadata
 * @property [] escrowProgram
 * @property [] splGovernanceProgram
 * @category Instructions
 * @category CreateUpdateRoleProposal
 * @category generated
 */
export type CreateUpdateRoleProposalInstructionAccounts = {
  realm: web3.PublicKey
  clubData: web3.PublicKey
  proposal: web3.PublicKey
  proposalTransaction: web3.PublicKey
  treasury: web3.PublicKey
  treasuryData: web3.PublicKey
  memberData: web3.PublicKey
  communityMint: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  payer: web3.PublicKey
  voterWeightRecord: web3.PublicKey
  governance: web3.PublicKey
  realmConfig: web3.PublicKey
  proposalMetadata: web3.PublicKey
  escrowProgram: web3.PublicKey
  splGovernanceProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createUpdateRoleProposalInstructionDiscriminator = [
  145, 107, 93, 151, 144, 57, 0, 160,
]

/**
 * Creates a _CreateUpdateRoleProposal_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateUpdateRoleProposal
 * @category generated
 */
export function createCreateUpdateRoleProposalInstruction(
  accounts: CreateUpdateRoleProposalInstructionAccounts,
  args: CreateUpdateRoleProposalInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createUpdateRoleProposalStruct.serialize({
    instructionDiscriminator: createUpdateRoleProposalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalTransaction,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.memberData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.communityMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.voterWeightRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.escrowProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
