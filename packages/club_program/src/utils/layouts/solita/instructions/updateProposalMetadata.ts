/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateProposalMetadata
 * @category generated
 */
export type UpdateProposalMetadataInstructionArgs = {
  description: beet.COption<string>
  name: beet.COption<string>
  options: beet.COption<string[]>
  discussionLink: beet.COption<string>
}
/**
 * @category Instructions
 * @category UpdateProposalMetadata
 * @category generated
 */
export const updateProposalMetadataStruct = new beet.FixableBeetArgsStruct<
  UpdateProposalMetadataInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['description', beet.coption(beet.utf8String)],
    ['name', beet.coption(beet.utf8String)],
    ['options', beet.coption(beet.array(beet.utf8String))],
    ['discussionLink', beet.coption(beet.utf8String)],
  ],
  'UpdateProposalMetadataInstructionArgs',
)
/**
 * Accounts required by the _updateProposalMetadata_ instruction
 *
 * @property [_writable_] proposalMetadata
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category UpdateProposalMetadata
 * @category generated
 */
export type UpdateProposalMetadataInstructionAccounts = {
  proposalMetadata: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateProposalMetadataInstructionDiscriminator = [
  134, 17, 27, 33, 108, 7, 81, 19,
]

/**
 * Creates a _UpdateProposalMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateProposalMetadata
 * @category generated
 */
export function createUpdateProposalMetadataInstruction(
  accounts: UpdateProposalMetadataInstructionAccounts,
  args: UpdateProposalMetadataInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = updateProposalMetadataStruct.serialize({
    instructionDiscriminator: updateProposalMetadataInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proposalMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
