/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category UpdateProposalDescription
 * @category generated
 */
export type UpdateProposalDescriptionInstructionArgs = {
  descriptionBuffer: string
  name: string
  options: string[]
  discussionLink: string
}
/**
 * @category Instructions
 * @category UpdateProposalDescription
 * @category generated
 */
export const updateProposalDescriptionStruct = new beet.FixableBeetArgsStruct<
  UpdateProposalDescriptionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['descriptionBuffer', beet.utf8String],
    ['name', beet.utf8String],
    ['options', beet.array(beet.utf8String)],
    ['discussionLink', beet.utf8String],
  ],
  'UpdateProposalDescriptionInstructionArgs',
)
/**
 * Accounts required by the _updateProposalDescription_ instruction
 *
 * @property [] proposal
 * @property [_writable_] proposalMetadata
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category UpdateProposalDescription
 * @category generated
 */
export type UpdateProposalDescriptionInstructionAccounts = {
  proposal: web3.PublicKey
  proposalMetadata: web3.PublicKey
  payer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateProposalDescriptionInstructionDiscriminator = [
  252, 66, 166, 167, 49, 61, 123, 214,
]

/**
 * Creates a _UpdateProposalDescription_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateProposalDescription
 * @category generated
 */
export function createUpdateProposalDescriptionInstruction(
  accounts: UpdateProposalDescriptionInstructionAccounts,
  args: UpdateProposalDescriptionInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = updateProposalDescriptionStruct.serialize({
    instructionDiscriminator: updateProposalDescriptionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalMetadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
