/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { GovernanceDto, governanceDtoBeet } from '../types/GovernanceDto.js'

/**
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export type CreateGovernanceInstructionArgs = {
  governanceDtos: GovernanceDto[]
}
/**
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export const createGovernanceStruct = new beet.FixableBeetArgsStruct<
  CreateGovernanceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['governanceDtos', beet.array(governanceDtoBeet)],
  ],
  'CreateGovernanceInstructionArgs',
)
/**
 * Accounts required by the _createGovernance_ instruction
 *
 * @property [] splGovernanceProgram
 * @property [_writable_] realm
 * @property [_writable_] realmConfig
 * @property [] tokenOwnerRecord
 * @property [_writable_] voterWeightRecord
 * @property [_writable_, **signer**] payer
 * @property [] memberData
 * @property [_writable_] clubData
 * @property [_writable_] treasuryData
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export type CreateGovernanceInstructionAccounts = {
  splGovernanceProgram: web3.PublicKey
  realm: web3.PublicKey
  realmConfig: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  voterWeightRecord: web3.PublicKey
  payer: web3.PublicKey
  memberData: web3.PublicKey
  clubData: web3.PublicKey
  treasuryData: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createGovernanceInstructionDiscriminator = [
  134, 46, 105, 91, 27, 91, 99, 157,
]

/**
 * Creates a _CreateGovernance_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateGovernance
 * @category generated
 */
export function createCreateGovernanceInstruction(
  accounts: CreateGovernanceInstructionAccounts,
  args: CreateGovernanceInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createGovernanceStruct.serialize({
    instructionDiscriminator: createGovernanceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.voterWeightRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.memberData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
