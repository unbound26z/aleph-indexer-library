/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category AcceptMembership
 * @category generated
 */
export const acceptMembershipStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'AcceptMembershipInstructionArgs',
)
/**
 * Accounts required by the _acceptMembership_ instruction
 *
 * @property [_writable_] memberData
 * @property [_writable_, **signer**] payer
 * @property [_writable_] realm
 * @property [] communityTokenMint
 * @property [] splGovernanceProgram
 * @property [_writable_] tokenOwnerRecord
 * @property [_writable_] clubData
 * @category Instructions
 * @category AcceptMembership
 * @category generated
 */
export type AcceptMembershipInstructionAccounts = {
  memberData: web3.PublicKey
  payer: web3.PublicKey
  realm: web3.PublicKey
  communityTokenMint: web3.PublicKey
  splGovernanceProgram: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  clubData: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const acceptMembershipInstructionDiscriminator = [
  194, 17, 125, 18, 228, 101, 227, 85,
]

/**
 * Creates a _AcceptMembership_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category AcceptMembership
 * @category generated
 */
export function createAcceptMembershipInstruction(
  accounts: AcceptMembershipInstructionAccounts,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = acceptMembershipStruct.serialize({
    instructionDiscriminator: acceptMembershipInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.memberData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.communityTokenMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
