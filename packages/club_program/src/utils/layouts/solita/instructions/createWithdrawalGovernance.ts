/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateWithdrawalGovernance
 * @category generated
 */
export type CreateWithdrawalGovernanceInstructionArgs = {
  treasuryIndex: number
  maxVotingTime: number
  voteThresholdPercentage: number
}
/**
 * @category Instructions
 * @category CreateWithdrawalGovernance
 * @category generated
 */
export const createWithdrawalGovernanceStruct = new beet.BeetArgsStruct<
  CreateWithdrawalGovernanceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['treasuryIndex', beet.u32],
    ['maxVotingTime', beet.u32],
    ['voteThresholdPercentage', beet.u8],
  ],
  'CreateWithdrawalGovernanceInstructionArgs',
)
/**
 * Accounts required by the _createWithdrawalGovernance_ instruction
 *
 * @property [] splGovernanceProgram
 * @property [_writable_] realm
 * @property [_writable_] realmConfig
 * @property [_writable_, **signer**] realmAuthority
 * @property [_writable_, **signer**] payer
 * @property [_writable_] tokenOwnerRecord
 * @property [_writable_] governance
 * @property [_writable_] voterWeightRecord
 * @property [] treasury
 * @property [_writable_] treasuryData
 * @property [] memberData
 * @property [_writable_] clubData
 * @property [] vault
 * @category Instructions
 * @category CreateWithdrawalGovernance
 * @category generated
 */
export type CreateWithdrawalGovernanceInstructionAccounts = {
  splGovernanceProgram: web3.PublicKey
  realm: web3.PublicKey
  realmConfig: web3.PublicKey
  realmAuthority: web3.PublicKey
  payer: web3.PublicKey
  tokenOwnerRecord: web3.PublicKey
  governance: web3.PublicKey
  voterWeightRecord: web3.PublicKey
  treasury: web3.PublicKey
  treasuryData: web3.PublicKey
  memberData: web3.PublicKey
  clubData: web3.PublicKey
  vault: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createWithdrawalGovernanceInstructionDiscriminator = [
  219, 236, 249, 47, 237, 209, 11, 175,
]

/**
 * Creates a _CreateWithdrawalGovernance_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateWithdrawalGovernance
 * @category generated
 */
export function createCreateWithdrawalGovernanceInstruction(
  accounts: CreateWithdrawalGovernanceInstructionAccounts,
  args: CreateWithdrawalGovernanceInstructionArgs,
  programId = new web3.PublicKey('UNQc364EDzKQqfSW1Fnhfam2fvsFGVdVqg77kpBqRSe'),
) {
  const [data] = createWithdrawalGovernanceStruct.serialize({
    instructionDiscriminator:
      createWithdrawalGovernanceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.splGovernanceProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.realm,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.realmAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenOwnerRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.governance,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.voterWeightRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treasuryData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.memberData,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clubData,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.vault,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
