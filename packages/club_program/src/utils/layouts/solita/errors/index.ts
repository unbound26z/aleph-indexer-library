/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * WrongSplGovProgram: 'Wrong spl gov id!'
 *
 * @category Errors
 * @category generated
 */
export class WrongSplGovProgramError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'WrongSplGovProgram'
  constructor() {
    super('Wrong spl gov id!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongSplGovProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new WrongSplGovProgramError())
createErrorFromNameLookup.set(
  'WrongSplGovProgram',
  () => new WrongSplGovProgramError(),
)

/**
 * WrongEscrowProgram: 'Wrong escrow id!'
 *
 * @category Errors
 * @category generated
 */
export class WrongEscrowProgramError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'WrongEscrowProgram'
  constructor() {
    super('Wrong escrow id!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongEscrowProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new WrongEscrowProgramError())
createErrorFromNameLookup.set(
  'WrongEscrowProgram',
  () => new WrongEscrowProgramError(),
)

/**
 * WrongUNQPubKey: 'Wrong UNQ mint pub key!'
 *
 * @category Errors
 * @category generated
 */
export class WrongUNQPubKeyError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'WrongUNQPubKey'
  constructor() {
    super('Wrong UNQ mint pub key!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongUNQPubKeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new WrongUNQPubKeyError())
createErrorFromNameLookup.set('WrongUNQPubKey', () => new WrongUNQPubKeyError())

/**
 * WrongPermissionLength: 'Wrong length of Permission config!'
 *
 * @category Errors
 * @category generated
 */
export class WrongPermissionLengthError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'WrongPermissionLength'
  constructor() {
    super('Wrong length of Permission config!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongPermissionLengthError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new WrongPermissionLengthError())
createErrorFromNameLookup.set(
  'WrongPermissionLength',
  () => new WrongPermissionLengthError(),
)

/**
 * NotAMember: 'You are not allowed to make deposits!'
 *
 * @category Errors
 * @category generated
 */
export class NotAMemberError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'NotAMember'
  constructor() {
    super('You are not allowed to make deposits!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotAMemberError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new NotAMemberError())
createErrorFromNameLookup.set('NotAMember', () => new NotAMemberError())

/**
 * InvalidMemberStatus: 'Invalid member status, valid values are: 0,1,2'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMemberStatusError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidMemberStatus'
  constructor() {
    super('Invalid member status, valid values are: 0,1,2')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMemberStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidMemberStatusError())
createErrorFromNameLookup.set(
  'InvalidMemberStatus',
  () => new InvalidMemberStatusError(),
)

/**
 * NotEnoughFunds: 'Not enough funds'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughFundsError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'NotEnoughFunds'
  constructor() {
    super('Not enough funds')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughFundsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1776, () => new NotEnoughFundsError())
createErrorFromNameLookup.set('NotEnoughFunds', () => new NotEnoughFundsError())

/**
 * InvalidAuthority: 'Not a valid authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'InvalidAuthority'
  constructor() {
    super('Not a valid authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new InvalidAuthorityError())
createErrorFromNameLookup.set(
  'InvalidAuthority',
  () => new InvalidAuthorityError(),
)

/**
 * InvalidMint: 'Invalid mint provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'InvalidMint'
  constructor() {
    super('Invalid mint provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new InvalidMintError())
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError())

/**
 * InvalidPerformanceFeeConfig: 'Performance fee configuration is invalid!'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPerformanceFeeConfigError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'InvalidPerformanceFeeConfig'
  constructor() {
    super('Performance fee configuration is invalid!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidPerformanceFeeConfigError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1779,
  () => new InvalidPerformanceFeeConfigError(),
)
createErrorFromNameLookup.set(
  'InvalidPerformanceFeeConfig',
  () => new InvalidPerformanceFeeConfigError(),
)

/**
 * TimeInPast: 'Time in past'
 *
 * @category Errors
 * @category generated
 */
export class TimeInPastError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'TimeInPast'
  constructor() {
    super('Time in past')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TimeInPastError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new TimeInPastError())
createErrorFromNameLookup.set('TimeInPast', () => new TimeInPastError())

/**
 * StartAfterTheEndTime: 'Start after end time'
 *
 * @category Errors
 * @category generated
 */
export class StartAfterTheEndTimeError extends Error {
  readonly code: number = 0x177b
  readonly name: string = 'StartAfterTheEndTime'
  constructor() {
    super('Start after end time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StartAfterTheEndTimeError)
    }
  }
}

createErrorFromCodeLookup.set(0x177b, () => new StartAfterTheEndTimeError())
createErrorFromNameLookup.set(
  'StartAfterTheEndTime',
  () => new StartAfterTheEndTimeError(),
)

/**
 * FundraiseInvalidAmount: 'Invalid fundraise amount'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseInvalidAmountError extends Error {
  readonly code: number = 0x177c
  readonly name: string = 'FundraiseInvalidAmount'
  constructor() {
    super('Invalid fundraise amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseInvalidAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x177c, () => new FundraiseInvalidAmountError())
createErrorFromNameLookup.set(
  'FundraiseInvalidAmount',
  () => new FundraiseInvalidAmountError(),
)

/**
 * FundraiseAmountAlreadyMet: 'Fundraise amount already met'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseAmountAlreadyMetError extends Error {
  readonly code: number = 0x177d
  readonly name: string = 'FundraiseAmountAlreadyMet'
  constructor() {
    super('Fundraise amount already met')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseAmountAlreadyMetError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x177d,
  () => new FundraiseAmountAlreadyMetError(),
)
createErrorFromNameLookup.set(
  'FundraiseAmountAlreadyMet',
  () => new FundraiseAmountAlreadyMetError(),
)

/**
 * FundraiseHasEnded: 'Fundraise has ended'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseHasEndedError extends Error {
  readonly code: number = 0x177e
  readonly name: string = 'FundraiseHasEnded'
  constructor() {
    super('Fundraise has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseHasEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x177e, () => new FundraiseHasEndedError())
createErrorFromNameLookup.set(
  'FundraiseHasEnded',
  () => new FundraiseHasEndedError(),
)

/**
 * FundraiseStillInProgress: 'Fundraise still in progress'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseStillInProgressError extends Error {
  readonly code: number = 0x177f
  readonly name: string = 'FundraiseStillInProgress'
  constructor() {
    super('Fundraise still in progress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseStillInProgressError)
    }
  }
}

createErrorFromCodeLookup.set(0x177f, () => new FundraiseStillInProgressError())
createErrorFromNameLookup.set(
  'FundraiseStillInProgress',
  () => new FundraiseStillInProgressError(),
)

/**
 * InvalidClubTypeStatus: 'Invalid club type, valid values are: 0,1,2,3'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClubTypeStatusError extends Error {
  readonly code: number = 0x1780
  readonly name: string = 'InvalidClubTypeStatus'
  constructor() {
    super('Invalid club type, valid values are: 0,1,2,3')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidClubTypeStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x1780, () => new InvalidClubTypeStatusError())
createErrorFromNameLookup.set(
  'InvalidClubTypeStatus',
  () => new InvalidClubTypeStatusError(),
)

/**
 * InvalidGovernance: 'Invalid governance address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidGovernanceError extends Error {
  readonly code: number = 0x1781
  readonly name: string = 'InvalidGovernance'
  constructor() {
    super('Invalid governance address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidGovernanceError)
    }
  }
}

createErrorFromCodeLookup.set(0x1781, () => new InvalidGovernanceError())
createErrorFromNameLookup.set(
  'InvalidGovernance',
  () => new InvalidGovernanceError(),
)

/**
 * SellPermissionNotSatisfied: 'Sell permission not satisfied'
 *
 * @category Errors
 * @category generated
 */
export class SellPermissionNotSatisfiedError extends Error {
  readonly code: number = 0x1782
  readonly name: string = 'SellPermissionNotSatisfied'
  constructor() {
    super('Sell permission not satisfied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellPermissionNotSatisfiedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1782,
  () => new SellPermissionNotSatisfiedError(),
)
createErrorFromNameLookup.set(
  'SellPermissionNotSatisfied',
  () => new SellPermissionNotSatisfiedError(),
)

/**
 * InvalidCancelAuthority: 'You do not have the permission to cancel this invitation'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCancelAuthorityError extends Error {
  readonly code: number = 0x1783
  readonly name: string = 'InvalidCancelAuthority'
  constructor() {
    super('You do not have the permission to cancel this invitation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCancelAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(0x1783, () => new InvalidCancelAuthorityError())
createErrorFromNameLookup.set(
  'InvalidCancelAuthority',
  () => new InvalidCancelAuthorityError(),
)

/**
 * InvalidTreasury: 'Invalid treasury address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTreasuryError extends Error {
  readonly code: number = 0x1784
  readonly name: string = 'InvalidTreasury'
  constructor() {
    super('Invalid treasury address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTreasuryError)
    }
  }
}

createErrorFromCodeLookup.set(0x1784, () => new InvalidTreasuryError())
createErrorFromNameLookup.set(
  'InvalidTreasury',
  () => new InvalidTreasuryError(),
)

/**
 * InvalidRole: 'Invalid role to perform this action'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRoleError extends Error {
  readonly code: number = 0x1785
  readonly name: string = 'InvalidRole'
  constructor() {
    super('Invalid role to perform this action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRoleError)
    }
  }
}

createErrorFromCodeLookup.set(0x1785, () => new InvalidRoleError())
createErrorFromNameLookup.set('InvalidRole', () => new InvalidRoleError())

/**
 * InvalidVoterWeightAction: 'Invalid voter weight action'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoterWeightActionError extends Error {
  readonly code: number = 0x1786
  readonly name: string = 'InvalidVoterWeightAction'
  constructor() {
    super('Invalid voter weight action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoterWeightActionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1786, () => new InvalidVoterWeightActionError())
createErrorFromNameLookup.set(
  'InvalidVoterWeightAction',
  () => new InvalidVoterWeightActionError(),
)

/**
 * VoterWeightActionNotAllowed: 'Voter weight action not allowed'
 *
 * @category Errors
 * @category generated
 */
export class VoterWeightActionNotAllowedError extends Error {
  readonly code: number = 0x1787
  readonly name: string = 'VoterWeightActionNotAllowed'
  constructor() {
    super('Voter weight action not allowed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoterWeightActionNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1787,
  () => new VoterWeightActionNotAllowedError(),
)
createErrorFromNameLookup.set(
  'VoterWeightActionNotAllowed',
  () => new VoterWeightActionNotAllowedError(),
)

/**
 * BelowMinimumVoteTreshold: 'Below minimum vote treshold'
 *
 * @category Errors
 * @category generated
 */
export class BelowMinimumVoteTresholdError extends Error {
  readonly code: number = 0x1788
  readonly name: string = 'BelowMinimumVoteTreshold'
  constructor() {
    super('Below minimum vote treshold')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BelowMinimumVoteTresholdError)
    }
  }
}

createErrorFromCodeLookup.set(0x1788, () => new BelowMinimumVoteTresholdError())
createErrorFromNameLookup.set(
  'BelowMinimumVoteTreshold',
  () => new BelowMinimumVoteTresholdError(),
)

/**
 * BelowMinimumVoteTime: 'Below minimum vote time'
 *
 * @category Errors
 * @category generated
 */
export class BelowMinimumVoteTimeError extends Error {
  readonly code: number = 0x1789
  readonly name: string = 'BelowMinimumVoteTime'
  constructor() {
    super('Below minimum vote time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BelowMinimumVoteTimeError)
    }
  }
}

createErrorFromCodeLookup.set(0x1789, () => new BelowMinimumVoteTimeError())
createErrorFromNameLookup.set(
  'BelowMinimumVoteTime',
  () => new BelowMinimumVoteTimeError(),
)

/**
 * MemberKeysMissmatch: 'Member data PDA sent doesn't match the one generated on Solana'
 *
 * @category Errors
 * @category generated
 */
export class MemberKeysMissmatchError extends Error {
  readonly code: number = 0x178a
  readonly name: string = 'MemberKeysMissmatch'
  constructor() {
    super("Member data PDA sent doesn't match the one generated on Solana")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemberKeysMissmatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x178a, () => new MemberKeysMissmatchError())
createErrorFromNameLookup.set(
  'MemberKeysMissmatch',
  () => new MemberKeysMissmatchError(),
)

/**
 * MemberAlreadyExists: 'Member data PDA has already been initialized'
 *
 * @category Errors
 * @category generated
 */
export class MemberAlreadyExistsError extends Error {
  readonly code: number = 0x178b
  readonly name: string = 'MemberAlreadyExists'
  constructor() {
    super('Member data PDA has already been initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MemberAlreadyExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x178b, () => new MemberAlreadyExistsError())
createErrorFromNameLookup.set(
  'MemberAlreadyExists',
  () => new MemberAlreadyExistsError(),
)

/**
 * InvalidProposalAction: 'Invalid proposal action'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalActionError extends Error {
  readonly code: number = 0x178c
  readonly name: string = 'InvalidProposalAction'
  constructor() {
    super('Invalid proposal action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalActionError)
    }
  }
}

createErrorFromCodeLookup.set(0x178c, () => new InvalidProposalActionError())
createErrorFromNameLookup.set(
  'InvalidProposalAction',
  () => new InvalidProposalActionError(),
)

/**
 * VoteNotAllowed: 'Member not allowed to vote on this proposal'
 *
 * @category Errors
 * @category generated
 */
export class VoteNotAllowedError extends Error {
  readonly code: number = 0x178d
  readonly name: string = 'VoteNotAllowed'
  constructor() {
    super('Member not allowed to vote on this proposal')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VoteNotAllowedError)
    }
  }
}

createErrorFromCodeLookup.set(0x178d, () => new VoteNotAllowedError())
createErrorFromNameLookup.set('VoteNotAllowed', () => new VoteNotAllowedError())

/**
 * MaxOrProposalRemainingAccountsMissing: 'Max Voter Weight Record and Proposal need to be passed as remaining accounts to cast a vote'
 *
 * @category Errors
 * @category generated
 */
export class MaxOrProposalRemainingAccountsMissingError extends Error {
  readonly code: number = 0x178e
  readonly name: string = 'MaxOrProposalRemainingAccountsMissing'
  constructor() {
    super(
      'Max Voter Weight Record and Proposal need to be passed as remaining accounts to cast a vote',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxOrProposalRemainingAccountsMissingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x178e,
  () => new MaxOrProposalRemainingAccountsMissingError(),
)
createErrorFromNameLookup.set(
  'MaxOrProposalRemainingAccountsMissing',
  () => new MaxOrProposalRemainingAccountsMissingError(),
)

/**
 * WrongProposalAddress: 'Wrong proposal account passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class WrongProposalAddressError extends Error {
  readonly code: number = 0x178f
  readonly name: string = 'WrongProposalAddress'
  constructor() {
    super('Wrong proposal account passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongProposalAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x178f, () => new WrongProposalAddressError())
createErrorFromNameLookup.set(
  'WrongProposalAddress',
  () => new WrongProposalAddressError(),
)

/**
 * WrongMaxVoterWeightRecord: 'Wrong MaxVoterWeightRecord account passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class WrongMaxVoterWeightRecordError extends Error {
  readonly code: number = 0x1790
  readonly name: string = 'WrongMaxVoterWeightRecord'
  constructor() {
    super('Wrong MaxVoterWeightRecord account passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongMaxVoterWeightRecordError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1790,
  () => new WrongMaxVoterWeightRecordError(),
)
createErrorFromNameLookup.set(
  'WrongMaxVoterWeightRecord',
  () => new WrongMaxVoterWeightRecordError(),
)

/**
 * InvalidVoterWeightProgram: 'Invalid voter weight program id'
 *
 * @category Errors
 * @category generated
 */
export class InvalidVoterWeightProgramError extends Error {
  readonly code: number = 0x1791
  readonly name: string = 'InvalidVoterWeightProgram'
  constructor() {
    super('Invalid voter weight program id')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidVoterWeightProgramError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1791,
  () => new InvalidVoterWeightProgramError(),
)
createErrorFromNameLookup.set(
  'InvalidVoterWeightProgram',
  () => new InvalidVoterWeightProgramError(),
)

/**
 * WrongFundraiseConfig: 'Wrong fundraise config'
 *
 * @category Errors
 * @category generated
 */
export class WrongFundraiseConfigError extends Error {
  readonly code: number = 0x1792
  readonly name: string = 'WrongFundraiseConfig'
  constructor() {
    super('Wrong fundraise config')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongFundraiseConfigError)
    }
  }
}

createErrorFromCodeLookup.set(0x1792, () => new WrongFundraiseConfigError())
createErrorFromNameLookup.set(
  'WrongFundraiseConfig',
  () => new WrongFundraiseConfigError(),
)

/**
 * FundraiseRemainingAccountMissing: 'Fundraise config needs to be passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseRemainingAccountMissingError extends Error {
  readonly code: number = 0x1793
  readonly name: string = 'FundraiseRemainingAccountMissing'
  constructor() {
    super('Fundraise config needs to be passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseRemainingAccountMissingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1793,
  () => new FundraiseRemainingAccountMissingError(),
)
createErrorFromNameLookup.set(
  'FundraiseRemainingAccountMissing',
  () => new FundraiseRemainingAccountMissingError(),
)

/**
 * InvalidAuthorityToCreateGovernance: 'Invalid authority to create governance: Only owner of the club can create governance!'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToCreateGovernanceError extends Error {
  readonly code: number = 0x1794
  readonly name: string = 'InvalidAuthorityToCreateGovernance'
  constructor() {
    super(
      'Invalid authority to create governance: Only owner of the club can create governance!',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToCreateGovernanceError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1794,
  () => new InvalidAuthorityToCreateGovernanceError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToCreateGovernance',
  () => new InvalidAuthorityToCreateGovernanceError(),
)

/**
 * GovernanceCreationAfterFundraise: 'The governance over treasury must be defined before the fundraise'
 *
 * @category Errors
 * @category generated
 */
export class GovernanceCreationAfterFundraiseError extends Error {
  readonly code: number = 0x1795
  readonly name: string = 'GovernanceCreationAfterFundraise'
  constructor() {
    super('The governance over treasury must be defined before the fundraise')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, GovernanceCreationAfterFundraiseError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1795,
  () => new GovernanceCreationAfterFundraiseError(),
)
createErrorFromNameLookup.set(
  'GovernanceCreationAfterFundraise',
  () => new GovernanceCreationAfterFundraiseError(),
)

/**
 * WrongGovernanceAccount: 'Wrong or uninitialized governance account provided to create_fundraise ix'
 *
 * @category Errors
 * @category generated
 */
export class WrongGovernanceAccountError extends Error {
  readonly code: number = 0x1796
  readonly name: string = 'WrongGovernanceAccount'
  constructor() {
    super(
      'Wrong or uninitialized governance account provided to create_fundraise ix',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongGovernanceAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1796, () => new WrongGovernanceAccountError())
createErrorFromNameLookup.set(
  'WrongGovernanceAccount',
  () => new WrongGovernanceAccountError(),
)

/**
 * ProposalAlreadyInitialized: 'Proposal aready initialized'
 *
 * @category Errors
 * @category generated
 */
export class ProposalAlreadyInitializedError extends Error {
  readonly code: number = 0x1797
  readonly name: string = 'ProposalAlreadyInitialized'
  constructor() {
    super('Proposal aready initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalAlreadyInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1797,
  () => new ProposalAlreadyInitializedError(),
)
createErrorFromNameLookup.set(
  'ProposalAlreadyInitialized',
  () => new ProposalAlreadyInitializedError(),
)

/**
 * ProposalMetadataLengthOverflow: 'Proposal metadata string length overflow'
 *
 * @category Errors
 * @category generated
 */
export class ProposalMetadataLengthOverflowError extends Error {
  readonly code: number = 0x1798
  readonly name: string = 'ProposalMetadataLengthOverflow'
  constructor() {
    super('Proposal metadata string length overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalMetadataLengthOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1798,
  () => new ProposalMetadataLengthOverflowError(),
)
createErrorFromNameLookup.set(
  'ProposalMetadataLengthOverflow',
  () => new ProposalMetadataLengthOverflowError(),
)

/**
 * FundraiseAmountExceeded: 'Fundraise amount exceeded'
 *
 * @category Errors
 * @category generated
 */
export class FundraiseAmountExceededError extends Error {
  readonly code: number = 0x1799
  readonly name: string = 'FundraiseAmountExceeded'
  constructor() {
    super('Fundraise amount exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FundraiseAmountExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x1799, () => new FundraiseAmountExceededError())
createErrorFromNameLookup.set(
  'FundraiseAmountExceeded',
  () => new FundraiseAmountExceededError(),
)

/**
 * InvalidNftAccount: 'Invalid NFT account provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidNftAccountError extends Error {
  readonly code: number = 0x179a
  readonly name: string = 'InvalidNftAccount'
  constructor() {
    super('Invalid NFT account provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidNftAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x179a, () => new InvalidNftAccountError())
createErrorFromNameLookup.set(
  'InvalidNftAccount',
  () => new InvalidNftAccountError(),
)

/**
 * NftNotOnTheProvidedAccount: 'Invalid NFT account provided'
 *
 * @category Errors
 * @category generated
 */
export class NftNotOnTheProvidedAccountError extends Error {
  readonly code: number = 0x179b
  readonly name: string = 'NftNotOnTheProvidedAccount'
  constructor() {
    super('Invalid NFT account provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NftNotOnTheProvidedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179b,
  () => new NftNotOnTheProvidedAccountError(),
)
createErrorFromNameLookup.set(
  'NftNotOnTheProvidedAccount',
  () => new NftNotOnTheProvidedAccountError(),
)

/**
 * CollectionMustBeVerified: 'Collection must be verified'
 *
 * @category Errors
 * @category generated
 */
export class CollectionMustBeVerifiedError extends Error {
  readonly code: number = 0x179c
  readonly name: string = 'CollectionMustBeVerified'
  constructor() {
    super('Collection must be verified')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionMustBeVerifiedError)
    }
  }
}

createErrorFromCodeLookup.set(0x179c, () => new CollectionMustBeVerifiedError())
createErrorFromNameLookup.set(
  'CollectionMustBeVerified',
  () => new CollectionMustBeVerifiedError(),
)

/**
 * CollectionMissing: 'Collection missing'
 *
 * @category Errors
 * @category generated
 */
export class CollectionMissingError extends Error {
  readonly code: number = 0x179d
  readonly name: string = 'CollectionMissing'
  constructor() {
    super('Collection missing')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CollectionMissingError)
    }
  }
}

createErrorFromCodeLookup.set(0x179d, () => new CollectionMissingError())
createErrorFromNameLookup.set(
  'CollectionMissing',
  () => new CollectionMissingError(),
)

/**
 * InvalidAccountOwner: 'Invalid account owner'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountOwnerError extends Error {
  readonly code: number = 0x179e
  readonly name: string = 'InvalidAccountOwner'
  constructor() {
    super('Invalid account owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAccountOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x179e, () => new InvalidAccountOwnerError())
createErrorFromNameLookup.set(
  'InvalidAccountOwner',
  () => new InvalidAccountOwnerError(),
)

/**
 * InvalidTokenMetadataAccount: 'Invalid token metadata account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenMetadataAccountError extends Error {
  readonly code: number = 0x179f
  readonly name: string = 'InvalidTokenMetadataAccount'
  constructor() {
    super('Invalid token metadata account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenMetadataAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x179f,
  () => new InvalidTokenMetadataAccountError(),
)
createErrorFromNameLookup.set(
  'InvalidTokenMetadataAccount',
  () => new InvalidTokenMetadataAccountError(),
)

/**
 * TokenMetadataDoesNotMatch: 'Token metadata does not match'
 *
 * @category Errors
 * @category generated
 */
export class TokenMetadataDoesNotMatchError extends Error {
  readonly code: number = 0x17a0
  readonly name: string = 'TokenMetadataDoesNotMatch'
  constructor() {
    super('Token metadata does not match')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TokenMetadataDoesNotMatchError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a0,
  () => new TokenMetadataDoesNotMatchError(),
)
createErrorFromNameLookup.set(
  'TokenMetadataDoesNotMatch',
  () => new TokenMetadataDoesNotMatchError(),
)

/**
 * OnlyForNftBasedClubs: 'Only callable for nft based clubs'
 *
 * @category Errors
 * @category generated
 */
export class OnlyForNftBasedClubsError extends Error {
  readonly code: number = 0x17a1
  readonly name: string = 'OnlyForNftBasedClubs'
  constructor() {
    super('Only callable for nft based clubs')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, OnlyForNftBasedClubsError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a1, () => new OnlyForNftBasedClubsError())
createErrorFromNameLookup.set(
  'OnlyForNftBasedClubs',
  () => new OnlyForNftBasedClubsError(),
)

/**
 * InvalidCollection: 'Invalid collection'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCollectionError extends Error {
  readonly code: number = 0x17a2
  readonly name: string = 'InvalidCollection'
  constructor() {
    super('Invalid collection')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidCollectionError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a2, () => new InvalidCollectionError())
createErrorFromNameLookup.set(
  'InvalidCollection',
  () => new InvalidCollectionError(),
)

/**
 * NftAlreadyVoted: 'Nft already voted on'
 *
 * @category Errors
 * @category generated
 */
export class NftAlreadyVotedError extends Error {
  readonly code: number = 0x17a3
  readonly name: string = 'NftAlreadyVoted'
  constructor() {
    super('Nft already voted on')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NftAlreadyVotedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a3, () => new NftAlreadyVotedError())
createErrorFromNameLookup.set(
  'NftAlreadyVoted',
  () => new NftAlreadyVotedError(),
)

/**
 * MissingRemainingAccounts: 'Missing remaining accounts'
 *
 * @category Errors
 * @category generated
 */
export class MissingRemainingAccountsError extends Error {
  readonly code: number = 0x17a4
  readonly name: string = 'MissingRemainingAccounts'
  constructor() {
    super('Missing remaining accounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingRemainingAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a4, () => new MissingRemainingAccountsError())
createErrorFromNameLookup.set(
  'MissingRemainingAccounts',
  () => new MissingRemainingAccountsError(),
)

/**
 * ProposalMetadataAlreadyInitialized: 'Proposal metadata aready initialized'
 *
 * @category Errors
 * @category generated
 */
export class ProposalMetadataAlreadyInitializedError extends Error {
  readonly code: number = 0x17a5
  readonly name: string = 'ProposalMetadataAlreadyInitialized'
  constructor() {
    super('Proposal metadata aready initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalMetadataAlreadyInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a5,
  () => new ProposalMetadataAlreadyInitializedError(),
)
createErrorFromNameLookup.set(
  'ProposalMetadataAlreadyInitialized',
  () => new ProposalMetadataAlreadyInitializedError(),
)

/**
 * InvalidSellPermissionGovernanceAccount: 'Invalid sell permission governance account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSellPermissionGovernanceAccountError extends Error {
  readonly code: number = 0x17a6
  readonly name: string = 'InvalidSellPermissionGovernanceAccount'
  constructor() {
    super('Invalid sell permission governance account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSellPermissionGovernanceAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a6,
  () => new InvalidSellPermissionGovernanceAccountError(),
)
createErrorFromNameLookup.set(
  'InvalidSellPermissionGovernanceAccount',
  () => new InvalidSellPermissionGovernanceAccountError(),
)

/**
 * SellPermissionAmountNotSatisfied: 'Sell permission amount not satisfied'
 *
 * @category Errors
 * @category generated
 */
export class SellPermissionAmountNotSatisfiedError extends Error {
  readonly code: number = 0x17a7
  readonly name: string = 'SellPermissionAmountNotSatisfied'
  constructor() {
    super('Sell permission amount not satisfied')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellPermissionAmountNotSatisfiedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a7,
  () => new SellPermissionAmountNotSatisfiedError(),
)
createErrorFromNameLookup.set(
  'SellPermissionAmountNotSatisfied',
  () => new SellPermissionAmountNotSatisfiedError(),
)

/**
 * SellPermissionGovernanceOnlyForBuyAction: 'Sell permission governance only for Buy action'
 *
 * @category Errors
 * @category generated
 */
export class SellPermissionGovernanceOnlyForBuyActionError extends Error {
  readonly code: number = 0x17a8
  readonly name: string = 'SellPermissionGovernanceOnlyForBuyAction'
  constructor() {
    super('Sell permission governance only for Buy action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        SellPermissionGovernanceOnlyForBuyActionError,
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17a8,
  () => new SellPermissionGovernanceOnlyForBuyActionError(),
)
createErrorFromNameLookup.set(
  'SellPermissionGovernanceOnlyForBuyAction',
  () => new SellPermissionGovernanceOnlyForBuyActionError(),
)

/**
 * AccountClosingErr: 'Couldn't transfer SOLs from profit_token to profit'
 *
 * @category Errors
 * @category generated
 */
export class AccountClosingErrError extends Error {
  readonly code: number = 0x17a9
  readonly name: string = 'AccountClosingErr'
  constructor() {
    super("Couldn't transfer SOLs from profit_token to profit")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AccountClosingErrError)
    }
  }
}

createErrorFromCodeLookup.set(0x17a9, () => new AccountClosingErrError())
createErrorFromNameLookup.set(
  'AccountClosingErr',
  () => new AccountClosingErrError(),
)

/**
 * TransferProfitDataExpired: 'Transfer profit data needs to be updated in the same slot'
 *
 * @category Errors
 * @category generated
 */
export class TransferProfitDataExpiredError extends Error {
  readonly code: number = 0x17aa
  readonly name: string = 'TransferProfitDataExpired'
  constructor() {
    super('Transfer profit data needs to be updated in the same slot')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransferProfitDataExpiredError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17aa,
  () => new TransferProfitDataExpiredError(),
)
createErrorFromNameLookup.set(
  'TransferProfitDataExpired',
  () => new TransferProfitDataExpiredError(),
)

/**
 * WithdrawalGovernanceAlreadyCreated: 'Withdrawal governance for this club has already been created'
 *
 * @category Errors
 * @category generated
 */
export class WithdrawalGovernanceAlreadyCreatedError extends Error {
  readonly code: number = 0x17ab
  readonly name: string = 'WithdrawalGovernanceAlreadyCreated'
  constructor() {
    super('Withdrawal governance for this club has already been created')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WithdrawalGovernanceAlreadyCreatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ab,
  () => new WithdrawalGovernanceAlreadyCreatedError(),
)
createErrorFromNameLookup.set(
  'WithdrawalGovernanceAlreadyCreated',
  () => new WithdrawalGovernanceAlreadyCreatedError(),
)

/**
 * StakingInProgress: 'Staking already in progress'
 *
 * @category Errors
 * @category generated
 */
export class StakingInProgressError extends Error {
  readonly code: number = 0x17ac
  readonly name: string = 'StakingInProgress'
  constructor() {
    super('Staking already in progress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingInProgressError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ac, () => new StakingInProgressError())
createErrorFromNameLookup.set(
  'StakingInProgress',
  () => new StakingInProgressError(),
)

/**
 * InvalidStakeAmount: 'Invalid stake amount parameter'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeAmountError extends Error {
  readonly code: number = 0x17ad
  readonly name: string = 'InvalidStakeAmount'
  constructor() {
    super('Invalid stake amount parameter')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ad, () => new InvalidStakeAmountError())
createErrorFromNameLookup.set(
  'InvalidStakeAmount',
  () => new InvalidStakeAmountError(),
)

/**
 * InvalidStakeStartDate: 'Invalid stake start date: Must select current date or future date'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeStartDateError extends Error {
  readonly code: number = 0x17ae
  readonly name: string = 'InvalidStakeStartDate'
  constructor() {
    super('Invalid stake start date: Must select current date or future date')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeStartDateError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ae, () => new InvalidStakeStartDateError())
createErrorFromNameLookup.set(
  'InvalidStakeStartDate',
  () => new InvalidStakeStartDateError(),
)

/**
 * InvalidStakeEndDate: 'Invalid stake end date: Stake-funding period must last at least one day'
 *
 * @category Errors
 * @category generated
 */
export class InvalidStakeEndDateError extends Error {
  readonly code: number = 0x17af
  readonly name: string = 'InvalidStakeEndDate'
  constructor() {
    super(
      'Invalid stake end date: Stake-funding period must last at least one day',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidStakeEndDateError)
    }
  }
}

createErrorFromCodeLookup.set(0x17af, () => new InvalidStakeEndDateError())
createErrorFromNameLookup.set(
  'InvalidStakeEndDate',
  () => new InvalidStakeEndDateError(),
)

/**
 * StakeCapOverflow: 'Stake cap overflow'
 *
 * @category Errors
 * @category generated
 */
export class StakeCapOverflowError extends Error {
  readonly code: number = 0x17b0
  readonly name: string = 'StakeCapOverflow'
  constructor() {
    super('Stake cap overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeCapOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b0, () => new StakeCapOverflowError())
createErrorFromNameLookup.set(
  'StakeCapOverflow',
  () => new StakeCapOverflowError(),
)

/**
 * NotEnoughUnqTokens: 'Not Enought UNQ Tokens'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughUnqTokensError extends Error {
  readonly code: number = 0x17b1
  readonly name: string = 'NotEnoughUnqTokens'
  constructor() {
    super('Not Enought UNQ Tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughUnqTokensError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b1, () => new NotEnoughUnqTokensError())
createErrorFromNameLookup.set(
  'NotEnoughUnqTokens',
  () => new NotEnoughUnqTokensError(),
)

/**
 * StakingHasntStartedYet: 'Staking funding period hasn't started yet'
 *
 * @category Errors
 * @category generated
 */
export class StakingHasntStartedYetError extends Error {
  readonly code: number = 0x17b2
  readonly name: string = 'StakingHasntStartedYet'
  constructor() {
    super("Staking funding period hasn't started yet")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingHasntStartedYetError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b2, () => new StakingHasntStartedYetError())
createErrorFromNameLookup.set(
  'StakingHasntStartedYet',
  () => new StakingHasntStartedYetError(),
)

/**
 * StakingFundingEnded: 'Staking funding period has ended'
 *
 * @category Errors
 * @category generated
 */
export class StakingFundingEndedError extends Error {
  readonly code: number = 0x17b3
  readonly name: string = 'StakingFundingEnded'
  constructor() {
    super('Staking funding period has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingFundingEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b3, () => new StakingFundingEndedError())
createErrorFromNameLookup.set(
  'StakingFundingEnded',
  () => new StakingFundingEndedError(),
)

/**
 * UnstakePeriodHasntEnded: 'Unstake period is three weeks, and it hasn't ended'
 *
 * @category Errors
 * @category generated
 */
export class UnstakePeriodHasntEndedError extends Error {
  readonly code: number = 0x17b4
  readonly name: string = 'UnstakePeriodHasntEnded'
  constructor() {
    super("Unstake period is three weeks, and it hasn't ended")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UnstakePeriodHasntEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b4, () => new UnstakePeriodHasntEndedError())
createErrorFromNameLookup.set(
  'UnstakePeriodHasntEnded',
  () => new UnstakePeriodHasntEndedError(),
)

/**
 * StakingWillBeOver: 'Staking will be over by the time, unstaking period has ended'
 *
 * @category Errors
 * @category generated
 */
export class StakingWillBeOverError extends Error {
  readonly code: number = 0x17b5
  readonly name: string = 'StakingWillBeOver'
  constructor() {
    super('Staking will be over by the time, unstaking period has ended')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingWillBeOverError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b5, () => new StakingWillBeOverError())
createErrorFromNameLookup.set(
  'StakingWillBeOver',
  () => new StakingWillBeOverError(),
)

/**
 * InvalidDepositAmount: 'Invalid deposit amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDepositAmountError extends Error {
  readonly code: number = 0x17b6
  readonly name: string = 'InvalidDepositAmount'
  constructor() {
    super('Invalid deposit amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDepositAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b6, () => new InvalidDepositAmountError())
createErrorFromNameLookup.set(
  'InvalidDepositAmount',
  () => new InvalidDepositAmountError(),
)

/**
 * MaxNumberOfFinancialRecordsExceeded: 'Cannot support with less than 1 tokens'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfFinancialRecordsExceededError extends Error {
  readonly code: number = 0x17b7
  readonly name: string = 'MaxNumberOfFinancialRecordsExceeded'
  constructor() {
    super('Cannot support with less than 1 tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxNumberOfFinancialRecordsExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b7,
  () => new MaxNumberOfFinancialRecordsExceededError(),
)
createErrorFromNameLookup.set(
  'MaxNumberOfFinancialRecordsExceeded',
  () => new MaxNumberOfFinancialRecordsExceededError(),
)

/**
 * MaxNumberOfActiveStakeRecords: 'Exceeds max number of active stakes'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfActiveStakeRecordsError extends Error {
  readonly code: number = 0x17b8
  readonly name: string = 'MaxNumberOfActiveStakeRecords'
  constructor() {
    super('Exceeds max number of active stakes')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxNumberOfActiveStakeRecordsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17b8,
  () => new MaxNumberOfActiveStakeRecordsError(),
)
createErrorFromNameLookup.set(
  'MaxNumberOfActiveStakeRecords',
  () => new MaxNumberOfActiveStakeRecordsError(),
)

/**
 * MaxStakeNameExceeded: 'Max stake name exceeded'
 *
 * @category Errors
 * @category generated
 */
export class MaxStakeNameExceededError extends Error {
  readonly code: number = 0x17b9
  readonly name: string = 'MaxStakeNameExceeded'
  constructor() {
    super('Max stake name exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxStakeNameExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x17b9, () => new MaxStakeNameExceededError())
createErrorFromNameLookup.set(
  'MaxStakeNameExceeded',
  () => new MaxStakeNameExceededError(),
)

/**
 * MaxCapExceeded: 'Max cap exceeded!'
 *
 * @category Errors
 * @category generated
 */
export class MaxCapExceededError extends Error {
  readonly code: number = 0x17ba
  readonly name: string = 'MaxCapExceeded'
  constructor() {
    super('Max cap exceeded!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxCapExceededError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ba, () => new MaxCapExceededError())
createErrorFromNameLookup.set('MaxCapExceeded', () => new MaxCapExceededError())

/**
 * StakingCanceled: 'Staking canceled!'
 *
 * @category Errors
 * @category generated
 */
export class StakingCanceledError extends Error {
  readonly code: number = 0x17bb
  readonly name: string = 'StakingCanceled'
  constructor() {
    super('Staking canceled!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingCanceledError)
    }
  }
}

createErrorFromCodeLookup.set(0x17bb, () => new StakingCanceledError())
createErrorFromNameLookup.set(
  'StakingCanceled',
  () => new StakingCanceledError(),
)

/**
 * AlreadyUnstaked: 'Already unstaked!'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyUnstakedError extends Error {
  readonly code: number = 0x17bc
  readonly name: string = 'AlreadyUnstaked'
  constructor() {
    super('Already unstaked!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyUnstakedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17bc, () => new AlreadyUnstakedError())
createErrorFromNameLookup.set(
  'AlreadyUnstaked',
  () => new AlreadyUnstakedError(),
)

/**
 * CannotClaimBeforeFundingPeriodIsOver: 'Cannot claim before stake funding period is over!'
 *
 * @category Errors
 * @category generated
 */
export class CannotClaimBeforeFundingPeriodIsOverError extends Error {
  readonly code: number = 0x17bd
  readonly name: string = 'CannotClaimBeforeFundingPeriodIsOver'
  constructor() {
    super('Cannot claim before stake funding period is over!')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotClaimBeforeFundingPeriodIsOverError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bd,
  () => new CannotClaimBeforeFundingPeriodIsOverError(),
)
createErrorFromNameLookup.set(
  'CannotClaimBeforeFundingPeriodIsOver',
  () => new CannotClaimBeforeFundingPeriodIsOverError(),
)

/**
 * StakePeriodHasntEnded: 'Stake period hasn't ended'
 *
 * @category Errors
 * @category generated
 */
export class StakePeriodHasntEndedError extends Error {
  readonly code: number = 0x17be
  readonly name: string = 'StakePeriodHasntEnded'
  constructor() {
    super("Stake period hasn't ended")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakePeriodHasntEndedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17be, () => new StakePeriodHasntEndedError())
createErrorFromNameLookup.set(
  'StakePeriodHasntEnded',
  () => new StakePeriodHasntEndedError(),
)

/**
 * StakeStatusNeedsToBeInProgress: 'Stake status needs to be InProgress'
 *
 * @category Errors
 * @category generated
 */
export class StakeStatusNeedsToBeInProgressError extends Error {
  readonly code: number = 0x17bf
  readonly name: string = 'StakeStatusNeedsToBeInProgress'
  constructor() {
    super('Stake status needs to be InProgress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakeStatusNeedsToBeInProgressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17bf,
  () => new StakeStatusNeedsToBeInProgressError(),
)
createErrorFromNameLookup.set(
  'StakeStatusNeedsToBeInProgress',
  () => new StakeStatusNeedsToBeInProgressError(),
)

/**
 * WrongRewardTokenAccount: 'Stake status needs to be InProgress'
 *
 * @category Errors
 * @category generated
 */
export class WrongRewardTokenAccountError extends Error {
  readonly code: number = 0x17c0
  readonly name: string = 'WrongRewardTokenAccount'
  constructor() {
    super('Stake status needs to be InProgress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongRewardTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c0, () => new WrongRewardTokenAccountError())
createErrorFromNameLookup.set(
  'WrongRewardTokenAccount',
  () => new WrongRewardTokenAccountError(),
)

/**
 * NotFundingStatus: 'StakeConfig must be in Funding status to be changed to InProgress'
 *
 * @category Errors
 * @category generated
 */
export class NotFundingStatusError extends Error {
  readonly code: number = 0x17c1
  readonly name: string = 'NotFundingStatus'
  constructor() {
    super('StakeConfig must be in Funding status to be changed to InProgress')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotFundingStatusError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c1, () => new NotFundingStatusError())
createErrorFromNameLookup.set(
  'NotFundingStatus',
  () => new NotFundingStatusError(),
)

/**
 * SellPermissionConfigFull: 'Sell permission config full'
 *
 * @category Errors
 * @category generated
 */
export class SellPermissionConfigFullError extends Error {
  readonly code: number = 0x17c2
  readonly name: string = 'SellPermissionConfigFull'
  constructor() {
    super('Sell permission config full')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellPermissionConfigFullError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c2, () => new SellPermissionConfigFullError())
createErrorFromNameLookup.set(
  'SellPermissionConfigFull',
  () => new SellPermissionConfigFullError(),
)

/**
 * WrongProposalUpdateAuthorority: 'Wrong proposal update authority'
 *
 * @category Errors
 * @category generated
 */
export class WrongProposalUpdateAuthororityError extends Error {
  readonly code: number = 0x17c3
  readonly name: string = 'WrongProposalUpdateAuthorority'
  constructor() {
    super('Wrong proposal update authority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongProposalUpdateAuthororityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c3,
  () => new WrongProposalUpdateAuthororityError(),
)
createErrorFromNameLookup.set(
  'WrongProposalUpdateAuthorority',
  () => new WrongProposalUpdateAuthororityError(),
)

/**
 * InvalidDepositRecordIndex: 'The index of DepositRecord seed must be leq than fundraise count at proposal init time'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDepositRecordIndexError extends Error {
  readonly code: number = 0x17c4
  readonly name: string = 'InvalidDepositRecordIndex'
  constructor() {
    super(
      'The index of DepositRecord seed must be leq than fundraise count at proposal init time',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDepositRecordIndexError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c4,
  () => new InvalidDepositRecordIndexError(),
)
createErrorFromNameLookup.set(
  'InvalidDepositRecordIndex',
  () => new InvalidDepositRecordIndexError(),
)

/**
 * WrongDepositRecordOwner: 'The payer of the transaction is not the owner of DepositRecord'
 *
 * @category Errors
 * @category generated
 */
export class WrongDepositRecordOwnerError extends Error {
  readonly code: number = 0x17c5
  readonly name: string = 'WrongDepositRecordOwner'
  constructor() {
    super('The payer of the transaction is not the owner of DepositRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongDepositRecordOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c5, () => new WrongDepositRecordOwnerError())
createErrorFromNameLookup.set(
  'WrongDepositRecordOwner',
  () => new WrongDepositRecordOwnerError(),
)

/**
 * WrongDepositRecordKey: 'The payer of the transaction is not the owner of DepositRecord'
 *
 * @category Errors
 * @category generated
 */
export class WrongDepositRecordKeyError extends Error {
  readonly code: number = 0x17c6
  readonly name: string = 'WrongDepositRecordKey'
  constructor() {
    super('The payer of the transaction is not the owner of DepositRecord')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongDepositRecordKeyError)
    }
  }
}

createErrorFromCodeLookup.set(0x17c6, () => new WrongDepositRecordKeyError())
createErrorFromNameLookup.set(
  'WrongDepositRecordKey',
  () => new WrongDepositRecordKeyError(),
)

/**
 * InvalidMaxAmountPerFundraise: 'The maximum amount of SOLs per fundraise is 200'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMaxAmountPerFundraiseError extends Error {
  readonly code: number = 0x17c7
  readonly name: string = 'InvalidMaxAmountPerFundraise'
  constructor() {
    super('The maximum amount of SOLs per fundraise is 200')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMaxAmountPerFundraiseError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c7,
  () => new InvalidMaxAmountPerFundraiseError(),
)
createErrorFromNameLookup.set(
  'InvalidMaxAmountPerFundraise',
  () => new InvalidMaxAmountPerFundraiseError(),
)

/**
 * MaxNumberOfMembersExceeded: 'The maximum amount of members per club is 99'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfMembersExceededError extends Error {
  readonly code: number = 0x17c8
  readonly name: string = 'MaxNumberOfMembersExceeded'
  constructor() {
    super('The maximum amount of members per club is 99')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxNumberOfMembersExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c8,
  () => new MaxNumberOfMembersExceededError(),
)
createErrorFromNameLookup.set(
  'MaxNumberOfMembersExceeded',
  () => new MaxNumberOfMembersExceededError(),
)

/**
 * InvalidMinAmountPerFundraise: 'The minimum amount of SOLs per fundraise is 200'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMinAmountPerFundraiseError extends Error {
  readonly code: number = 0x17c9
  readonly name: string = 'InvalidMinAmountPerFundraise'
  constructor() {
    super('The minimum amount of SOLs per fundraise is 200')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMinAmountPerFundraiseError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17c9,
  () => new InvalidMinAmountPerFundraiseError(),
)
createErrorFromNameLookup.set(
  'InvalidMinAmountPerFundraise',
  () => new InvalidMinAmountPerFundraiseError(),
)

/**
 * WrongOwnerOfTokenAccount: 'Wrong owner of NFT Token Account'
 *
 * @category Errors
 * @category generated
 */
export class WrongOwnerOfTokenAccountError extends Error {
  readonly code: number = 0x17ca
  readonly name: string = 'WrongOwnerOfTokenAccount'
  constructor() {
    super('Wrong owner of NFT Token Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongOwnerOfTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ca, () => new WrongOwnerOfTokenAccountError())
createErrorFromNameLookup.set(
  'WrongOwnerOfTokenAccount',
  () => new WrongOwnerOfTokenAccountError(),
)

/**
 * SpaceAlreadyAllocated: 'Space already reallocated'
 *
 * @category Errors
 * @category generated
 */
export class SpaceAlreadyAllocatedError extends Error {
  readonly code: number = 0x17cb
  readonly name: string = 'SpaceAlreadyAllocated'
  constructor() {
    super('Space already reallocated')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SpaceAlreadyAllocatedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17cb, () => new SpaceAlreadyAllocatedError())
createErrorFromNameLookup.set(
  'SpaceAlreadyAllocated',
  () => new SpaceAlreadyAllocatedError(),
)

/**
 * WrongAmountOnTheNftAccount: 'The amount of token on the NFT Token Account must be 1'
 *
 * @category Errors
 * @category generated
 */
export class WrongAmountOnTheNftAccountError extends Error {
  readonly code: number = 0x17cc
  readonly name: string = 'WrongAmountOnTheNftAccount'
  constructor() {
    super('The amount of token on the NFT Token Account must be 1')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongAmountOnTheNftAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17cc,
  () => new WrongAmountOnTheNftAccountError(),
)
createErrorFromNameLookup.set(
  'WrongAmountOnTheNftAccount',
  () => new WrongAmountOnTheNftAccountError(),
)

/**
 * WrongNftMintForStaking: 'Mint account doesn't match the token account provided for staking'
 *
 * @category Errors
 * @category generated
 */
export class WrongNftMintForStakingError extends Error {
  readonly code: number = 0x17cd
  readonly name: string = 'WrongNftMintForStaking'
  constructor() {
    super("Mint account doesn't match the token account provided for staking")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongNftMintForStakingError)
    }
  }
}

createErrorFromCodeLookup.set(0x17cd, () => new WrongNftMintForStakingError())
createErrorFromNameLookup.set(
  'WrongNftMintForStaking',
  () => new WrongNftMintForStakingError(),
)

/**
 * WrongUniverseMetadataForMint: 'UniverseMetadata doesn't match the provided mint'
 *
 * @category Errors
 * @category generated
 */
export class WrongUniverseMetadataForMintError extends Error {
  readonly code: number = 0x17ce
  readonly name: string = 'WrongUniverseMetadataForMint'
  constructor() {
    super("UniverseMetadata doesn't match the provided mint")
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongUniverseMetadataForMintError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ce,
  () => new WrongUniverseMetadataForMintError(),
)
createErrorFromNameLookup.set(
  'WrongUniverseMetadataForMint',
  () => new WrongUniverseMetadataForMintError(),
)

/**
 * UniverseLevelLow: 'Universe level too low to stake'
 *
 * @category Errors
 * @category generated
 */
export class UniverseLevelLowError extends Error {
  readonly code: number = 0x17cf
  readonly name: string = 'UniverseLevelLow'
  constructor() {
    super('Universe level too low to stake')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UniverseLevelLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x17cf, () => new UniverseLevelLowError())
createErrorFromNameLookup.set(
  'UniverseLevelLow',
  () => new UniverseLevelLowError(),
)

/**
 * NftStakeAccountInitialized: 'The PDA of the TokenAccount storing NFT is already initialized'
 *
 * @category Errors
 * @category generated
 */
export class NftStakeAccountInitializedError extends Error {
  readonly code: number = 0x17d0
  readonly name: string = 'NftStakeAccountInitialized'
  constructor() {
    super('The PDA of the TokenAccount storing NFT is already initialized')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NftStakeAccountInitializedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d0,
  () => new NftStakeAccountInitializedError(),
)
createErrorFromNameLookup.set(
  'NftStakeAccountInitialized',
  () => new NftStakeAccountInitializedError(),
)

/**
 * WrongStakedNftAddress: 'The PDA of the TokenAccount storing NFT is wrong'
 *
 * @category Errors
 * @category generated
 */
export class WrongStakedNftAddressError extends Error {
  readonly code: number = 0x17d1
  readonly name: string = 'WrongStakedNftAddress'
  constructor() {
    super('The PDA of the TokenAccount storing NFT is wrong')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongStakedNftAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d1, () => new WrongStakedNftAddressError())
createErrorFromNameLookup.set(
  'WrongStakedNftAddress',
  () => new WrongStakedNftAddressError(),
)

/**
 * LowerRarity: 'Universe NFT must be of higher rarity than the one already staked'
 *
 * @category Errors
 * @category generated
 */
export class LowerRarityError extends Error {
  readonly code: number = 0x17d2
  readonly name: string = 'LowerRarity'
  constructor() {
    super('Universe NFT must be of higher rarity than the one already staked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, LowerRarityError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d2, () => new LowerRarityError())
createErrorFromNameLookup.set('LowerRarity', () => new LowerRarityError())

/**
 * NftClaimed: 'This NFT was already claimed'
 *
 * @category Errors
 * @category generated
 */
export class NftClaimedError extends Error {
  readonly code: number = 0x17d3
  readonly name: string = 'NftClaimed'
  constructor() {
    super('This NFT was already claimed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NftClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d3, () => new NftClaimedError())
createErrorFromNameLookup.set('NftClaimed', () => new NftClaimedError())

/**
 * WrongStakedTokensAddress: 'The PDA of the TokenAccount storing NFT is wrong'
 *
 * @category Errors
 * @category generated
 */
export class WrongStakedTokensAddressError extends Error {
  readonly code: number = 0x17d4
  readonly name: string = 'WrongStakedTokensAddress'
  constructor() {
    super('The PDA of the TokenAccount storing NFT is wrong')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongStakedTokensAddressError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d4, () => new WrongStakedTokensAddressError())
createErrorFromNameLookup.set(
  'WrongStakedTokensAddress',
  () => new WrongStakedTokensAddressError(),
)

/**
 * CannotTransferOldStakedNft: 'Failed to transfer old NFT to its owner'
 *
 * @category Errors
 * @category generated
 */
export class CannotTransferOldStakedNftError extends Error {
  readonly code: number = 0x17d5
  readonly name: string = 'CannotTransferOldStakedNft'
  constructor() {
    super('Failed to transfer old NFT to its owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotTransferOldStakedNftError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d5,
  () => new CannotTransferOldStakedNftError(),
)
createErrorFromNameLookup.set(
  'CannotTransferOldStakedNft',
  () => new CannotTransferOldStakedNftError(),
)

/**
 * WrongNftReceiverTokenAccount: 'Wrong NFT receiver TokenAccount passed'
 *
 * @category Errors
 * @category generated
 */
export class WrongNftReceiverTokenAccountError extends Error {
  readonly code: number = 0x17d6
  readonly name: string = 'WrongNftReceiverTokenAccount'
  constructor() {
    super('Wrong NFT receiver TokenAccount passed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongNftReceiverTokenAccountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17d6,
  () => new WrongNftReceiverTokenAccountError(),
)
createErrorFromNameLookup.set(
  'WrongNftReceiverTokenAccount',
  () => new WrongNftReceiverTokenAccountError(),
)

/**
 * WrongOwnerOfStakedNft: 'Wrong owner of the staked NFT'
 *
 * @category Errors
 * @category generated
 */
export class WrongOwnerOfStakedNftError extends Error {
  readonly code: number = 0x17d7
  readonly name: string = 'WrongOwnerOfStakedNft'
  constructor() {
    super('Wrong owner of the staked NFT')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongOwnerOfStakedNftError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d7, () => new WrongOwnerOfStakedNftError())
createErrorFromNameLookup.set(
  'WrongOwnerOfStakedNft',
  () => new WrongOwnerOfStakedNftError(),
)

/**
 * AlreadyClaimed: 'Already claimed your tokens'
 *
 * @category Errors
 * @category generated
 */
export class AlreadyClaimedError extends Error {
  readonly code: number = 0x17d8
  readonly name: string = 'AlreadyClaimed'
  constructor() {
    super('Already claimed your tokens')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AlreadyClaimedError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d8, () => new AlreadyClaimedError())
createErrorFromNameLookup.set('AlreadyClaimed', () => new AlreadyClaimedError())

/**
 * WrongStakeRecordOwner: 'Wrong stake record owner'
 *
 * @category Errors
 * @category generated
 */
export class WrongStakeRecordOwnerError extends Error {
  readonly code: number = 0x17d9
  readonly name: string = 'WrongStakeRecordOwner'
  constructor() {
    super('Wrong stake record owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongStakeRecordOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17d9, () => new WrongStakeRecordOwnerError())
createErrorFromNameLookup.set(
  'WrongStakeRecordOwner',
  () => new WrongStakeRecordOwnerError(),
)

/**
 * InvalidFinancialRecordAmount: 'Invalid financial record amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFinancialRecordAmountError extends Error {
  readonly code: number = 0x17da
  readonly name: string = 'InvalidFinancialRecordAmount'
  constructor() {
    super('Invalid financial record amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFinancialRecordAmountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17da,
  () => new InvalidFinancialRecordAmountError(),
)
createErrorFromNameLookup.set(
  'InvalidFinancialRecordAmount',
  () => new InvalidFinancialRecordAmountError(),
)

/**
 * WrongCancelFinancialOfferAuthority: 'Signer has no authority to cancel this financial offer'
 *
 * @category Errors
 * @category generated
 */
export class WrongCancelFinancialOfferAuthorityError extends Error {
  readonly code: number = 0x17db
  readonly name: string = 'WrongCancelFinancialOfferAuthority'
  constructor() {
    super('Signer has no authority to cancel this financial offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongCancelFinancialOfferAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17db,
  () => new WrongCancelFinancialOfferAuthorityError(),
)
createErrorFromNameLookup.set(
  'WrongCancelFinancialOfferAuthority',
  () => new WrongCancelFinancialOfferAuthorityError(),
)

/**
 * WrongFinancialBuyerTokenMint: 'Wrong financial buyer token mint'
 *
 * @category Errors
 * @category generated
 */
export class WrongFinancialBuyerTokenMintError extends Error {
  readonly code: number = 0x17dc
  readonly name: string = 'WrongFinancialBuyerTokenMint'
  constructor() {
    super('Wrong financial buyer token mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongFinancialBuyerTokenMintError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17dc,
  () => new WrongFinancialBuyerTokenMintError(),
)
createErrorFromNameLookup.set(
  'WrongFinancialBuyerTokenMint',
  () => new WrongFinancialBuyerTokenMintError(),
)

/**
 * NotEnoughTokensToAcceptFinancialOffer: 'Not enough tokens to accept financial offer'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughTokensToAcceptFinancialOfferError extends Error {
  readonly code: number = 0x17dd
  readonly name: string = 'NotEnoughTokensToAcceptFinancialOffer'
  constructor() {
    super('Not enough tokens to accept financial offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughTokensToAcceptFinancialOfferError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17dd,
  () => new NotEnoughTokensToAcceptFinancialOfferError(),
)
createErrorFromNameLookup.set(
  'NotEnoughTokensToAcceptFinancialOffer',
  () => new NotEnoughTokensToAcceptFinancialOfferError(),
)

/**
 * CannotCreateFinancialOffer: 'Cannot create financial offer while a fundraise is active'
 *
 * @category Errors
 * @category generated
 */
export class CannotCreateFinancialOfferError extends Error {
  readonly code: number = 0x17de
  readonly name: string = 'CannotCreateFinancialOffer'
  constructor() {
    super('Cannot create financial offer while a fundraise is active')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotCreateFinancialOfferError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17de,
  () => new CannotCreateFinancialOfferError(),
)
createErrorFromNameLookup.set(
  'CannotCreateFinancialOffer',
  () => new CannotCreateFinancialOfferError(),
)

/**
 * NotDesignatedBuyerForFinancialOffer: 'You are not the designated buyer for this financial offer'
 *
 * @category Errors
 * @category generated
 */
export class NotDesignatedBuyerForFinancialOfferError extends Error {
  readonly code: number = 0x17df
  readonly name: string = 'NotDesignatedBuyerForFinancialOffer'
  constructor() {
    super('You are not the designated buyer for this financial offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotDesignatedBuyerForFinancialOfferError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17df,
  () => new NotDesignatedBuyerForFinancialOfferError(),
)
createErrorFromNameLookup.set(
  'NotDesignatedBuyerForFinancialOffer',
  () => new NotDesignatedBuyerForFinancialOfferError(),
)

/**
 * FinancialOffersNotZero: 'There cannot be any active financial offers when starting a fundraise'
 *
 * @category Errors
 * @category generated
 */
export class FinancialOffersNotZeroError extends Error {
  readonly code: number = 0x17e0
  readonly name: string = 'FinancialOffersNotZero'
  constructor() {
    super(
      'There cannot be any active financial offers when starting a fundraise',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FinancialOffersNotZeroError)
    }
  }
}

createErrorFromCodeLookup.set(0x17e0, () => new FinancialOffersNotZeroError())
createErrorFromNameLookup.set(
  'FinancialOffersNotZero',
  () => new FinancialOffersNotZeroError(),
)

/**
 * WrongMagicEdenAccountsHolder: 'Wrong accounts holder for BuyNow on MagicEden'
 *
 * @category Errors
 * @category generated
 */
export class WrongMagicEdenAccountsHolderError extends Error {
  readonly code: number = 0x17e1
  readonly name: string = 'WrongMagicEdenAccountsHolder'
  constructor() {
    super('Wrong accounts holder for BuyNow on MagicEden')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongMagicEdenAccountsHolderError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e1,
  () => new WrongMagicEdenAccountsHolderError(),
)
createErrorFromNameLookup.set(
  'WrongMagicEdenAccountsHolder',
  () => new WrongMagicEdenAccountsHolderError(),
)

/**
 * NoOfferAccountForMagicEden: 'Wrong PDA passed as offer address for MagicEden BuyNow'
 *
 * @category Errors
 * @category generated
 */
export class NoOfferAccountForMagicEdenError extends Error {
  readonly code: number = 0x17e2
  readonly name: string = 'NoOfferAccountForMagicEden'
  constructor() {
    super('Wrong PDA passed as offer address for MagicEden BuyNow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoOfferAccountForMagicEdenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e2,
  () => new NoOfferAccountForMagicEdenError(),
)
createErrorFromNameLookup.set(
  'NoOfferAccountForMagicEden',
  () => new NoOfferAccountForMagicEdenError(),
)

/**
 * NoWantedTokenMintForMagicEdenBuyNow: 'Wrong wanted_token_mint passed as remaining account passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class NoWantedTokenMintForMagicEdenBuyNowError extends Error {
  readonly code: number = 0x17e3
  readonly name: string = 'NoWantedTokenMintForMagicEdenBuyNow'
  constructor() {
    super(
      'Wrong wanted_token_mint passed as remaining account passed as remaining account',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoWantedTokenMintForMagicEdenBuyNowError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e3,
  () => new NoWantedTokenMintForMagicEdenBuyNowError(),
)
createErrorFromNameLookup.set(
  'NoWantedTokenMintForMagicEdenBuyNow',
  () => new NoWantedTokenMintForMagicEdenBuyNowError(),
)

/**
 * NoEscrowedWantedTokenAccountForMagicEden: 'Wrong escrowed_wanted_token account passed as remaining account for BuyNow'
 *
 * @category Errors
 * @category generated
 */
export class NoEscrowedWantedTokenAccountForMagicEdenError extends Error {
  readonly code: number = 0x17e4
  readonly name: string = 'NoEscrowedWantedTokenAccountForMagicEden'
  constructor() {
    super(
      'Wrong escrowed_wanted_token account passed as remaining account for BuyNow',
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        NoEscrowedWantedTokenAccountForMagicEdenError,
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e4,
  () => new NoEscrowedWantedTokenAccountForMagicEdenError(),
)
createErrorFromNameLookup.set(
  'NoEscrowedWantedTokenAccountForMagicEden',
  () => new NoEscrowedWantedTokenAccountForMagicEdenError(),
)

/**
 * NoOfferedTokenMintForMagicEden: 'No offered_token_mint passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class NoOfferedTokenMintForMagicEdenError extends Error {
  readonly code: number = 0x17e5
  readonly name: string = 'NoOfferedTokenMintForMagicEden'
  constructor() {
    super('No offered_token_mint passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoOfferedTokenMintForMagicEdenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e5,
  () => new NoOfferedTokenMintForMagicEdenError(),
)
createErrorFromNameLookup.set(
  'NoOfferedTokenMintForMagicEden',
  () => new NoOfferedTokenMintForMagicEdenError(),
)

/**
 * NoMakerWantedTokenForMagicEden: 'No maker_wanted_token passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class NoMakerWantedTokenForMagicEdenError extends Error {
  readonly code: number = 0x17e6
  readonly name: string = 'NoMakerWantedTokenForMagicEden'
  constructor() {
    super('No maker_wanted_token passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoMakerWantedTokenForMagicEdenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e6,
  () => new NoMakerWantedTokenForMagicEdenError(),
)
createErrorFromNameLookup.set(
  'NoMakerWantedTokenForMagicEden',
  () => new NoMakerWantedTokenForMagicEdenError(),
)

/**
 * NoTokenProgramForMagicEden: 'No token_program passed as remaining account'
 *
 * @category Errors
 * @category generated
 */
export class NoTokenProgramForMagicEdenError extends Error {
  readonly code: number = 0x17e7
  readonly name: string = 'NoTokenProgramForMagicEden'
  constructor() {
    super('No token_program passed as remaining account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoTokenProgramForMagicEdenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e7,
  () => new NoTokenProgramForMagicEdenError(),
)
createErrorFromNameLookup.set(
  'NoTokenProgramForMagicEden',
  () => new NoTokenProgramForMagicEdenError(),
)

/**
 * InvalidFinancialRightsAmount: 'Invalid amount of financial rights to buy'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFinancialRightsAmountError extends Error {
  readonly code: number = 0x17e8
  readonly name: string = 'InvalidFinancialRightsAmount'
  constructor() {
    super('Invalid amount of financial rights to buy')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFinancialRightsAmountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e8,
  () => new InvalidFinancialRightsAmountError(),
)
createErrorFromNameLookup.set(
  'InvalidFinancialRightsAmount',
  () => new InvalidFinancialRightsAmountError(),
)

/**
 * FinancialRightsAmountExceeded: 'You do not have enough financial rights'
 *
 * @category Errors
 * @category generated
 */
export class FinancialRightsAmountExceededError extends Error {
  readonly code: number = 0x17e9
  readonly name: string = 'FinancialRightsAmountExceeded'
  constructor() {
    super('You do not have enough financial rights')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FinancialRightsAmountExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17e9,
  () => new FinancialRightsAmountExceededError(),
)
createErrorFromNameLookup.set(
  'FinancialRightsAmountExceeded',
  () => new FinancialRightsAmountExceededError(),
)

/**
 * WrongMeBuyNowMaker: 'This is not the treasury that made this offer'
 *
 * @category Errors
 * @category generated
 */
export class WrongMeBuyNowMakerError extends Error {
  readonly code: number = 0x17ea
  readonly name: string = 'WrongMeBuyNowMaker'
  constructor() {
    super('This is not the treasury that made this offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongMeBuyNowMakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ea, () => new WrongMeBuyNowMakerError())
createErrorFromNameLookup.set(
  'WrongMeBuyNowMaker',
  () => new WrongMeBuyNowMakerError(),
)

/**
 * WrongMeSellMaker: 'This is not the vault that made this offer'
 *
 * @category Errors
 * @category generated
 */
export class WrongMeSellMakerError extends Error {
  readonly code: number = 0x17eb
  readonly name: string = 'WrongMeSellMaker'
  constructor() {
    super('This is not the vault that made this offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongMeSellMakerError)
    }
  }
}

createErrorFromCodeLookup.set(0x17eb, () => new WrongMeSellMakerError())
createErrorFromNameLookup.set(
  'WrongMeSellMaker',
  () => new WrongMeSellMakerError(),
)

/**
 * ProposalToBuyNowNotExecuted: 'Proposal to buy on magic eden needs to be executed'
 *
 * @category Errors
 * @category generated
 */
export class ProposalToBuyNowNotExecutedError extends Error {
  readonly code: number = 0x17ec
  readonly name: string = 'ProposalToBuyNowNotExecuted'
  constructor() {
    super('Proposal to buy on magic eden needs to be executed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalToBuyNowNotExecutedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ec,
  () => new ProposalToBuyNowNotExecutedError(),
)
createErrorFromNameLookup.set(
  'ProposalToBuyNowNotExecuted',
  () => new ProposalToBuyNowNotExecutedError(),
)

/**
 * ProposalToSellNotExecuted: 'Proposal to sell on magic eden needs to be executed'
 *
 * @category Errors
 * @category generated
 */
export class ProposalToSellNotExecutedError extends Error {
  readonly code: number = 0x17ed
  readonly name: string = 'ProposalToSellNotExecuted'
  constructor() {
    super('Proposal to sell on magic eden needs to be executed')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProposalToSellNotExecutedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ed,
  () => new ProposalToSellNotExecutedError(),
)
createErrorFromNameLookup.set(
  'ProposalToSellNotExecuted',
  () => new ProposalToSellNotExecutedError(),
)

/**
 * FailedToParseDenominatedCurrencyAsMint: 'Wrong denominated currency token account mint'
 *
 * @category Errors
 * @category generated
 */
export class FailedToParseDenominatedCurrencyAsMintError extends Error {
  readonly code: number = 0x17ee
  readonly name: string = 'FailedToParseDenominatedCurrencyAsMint'
  constructor() {
    super('Wrong denominated currency token account mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedToParseDenominatedCurrencyAsMintError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ee,
  () => new FailedToParseDenominatedCurrencyAsMintError(),
)
createErrorFromNameLookup.set(
  'FailedToParseDenominatedCurrencyAsMint',
  () => new FailedToParseDenominatedCurrencyAsMintError(),
)

/**
 * WrongDenominatedCurrencyTokenAccountMint: 'Wrong denominated currency token account mint'
 *
 * @category Errors
 * @category generated
 */
export class WrongDenominatedCurrencyTokenAccountMintError extends Error {
  readonly code: number = 0x17ef
  readonly name: string = 'WrongDenominatedCurrencyTokenAccountMint'
  constructor() {
    super('Wrong denominated currency token account mint')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        WrongDenominatedCurrencyTokenAccountMintError,
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x17ef,
  () => new WrongDenominatedCurrencyTokenAccountMintError(),
)
createErrorFromNameLookup.set(
  'WrongDenominatedCurrencyTokenAccountMint',
  () => new WrongDenominatedCurrencyTokenAccountMintError(),
)

/**
 * WrongDenominatedTokenAddress: 'Wrong denominated token address'
 *
 * @category Errors
 * @category generated
 */
export class WrongDenominatedTokenAddressError extends Error {
  readonly code: number = 0x17f0
  readonly name: string = 'WrongDenominatedTokenAddress'
  constructor() {
    super('Wrong denominated token address')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongDenominatedTokenAddressError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f0,
  () => new WrongDenominatedTokenAddressError(),
)
createErrorFromNameLookup.set(
  'WrongDenominatedTokenAddress',
  () => new WrongDenominatedTokenAddressError(),
)

/**
 * FailedToSupportClub: 'Failed to support club'
 *
 * @category Errors
 * @category generated
 */
export class FailedToSupportClubError extends Error {
  readonly code: number = 0x17f1
  readonly name: string = 'FailedToSupportClub'
  constructor() {
    super('Failed to support club')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, FailedToSupportClubError)
    }
  }
}

createErrorFromCodeLookup.set(0x17f1, () => new FailedToSupportClubError())
createErrorFromNameLookup.set(
  'FailedToSupportClub',
  () => new FailedToSupportClubError(),
)

/**
 * TransferGovernanceAlreadyCreated: 'Transfer governance for this club has already been created'
 *
 * @category Errors
 * @category generated
 */
export class TransferGovernanceAlreadyCreatedError extends Error {
  readonly code: number = 0x17f2
  readonly name: string = 'TransferGovernanceAlreadyCreated'
  constructor() {
    super('Transfer governance for this club has already been created')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TransferGovernanceAlreadyCreatedError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f2,
  () => new TransferGovernanceAlreadyCreatedError(),
)
createErrorFromNameLookup.set(
  'TransferGovernanceAlreadyCreated',
  () => new TransferGovernanceAlreadyCreatedError(),
)

/**
 * InvalidAuthorityToInviteMember: 'Not a valid authority to invite a member'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToInviteMemberError extends Error {
  readonly code: number = 0x17f3
  readonly name: string = 'InvalidAuthorityToInviteMember'
  constructor() {
    super('Not a valid authority to invite a member')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToInviteMemberError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f3,
  () => new InvalidAuthorityToInviteMemberError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToInviteMember',
  () => new InvalidAuthorityToInviteMemberError(),
)

/**
 * InvalidAuthorityToCancelOffer: 'Invalid authority to cancel P2P offer'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToCancelOfferError extends Error {
  readonly code: number = 0x17f4
  readonly name: string = 'InvalidAuthorityToCancelOffer'
  constructor() {
    super('Invalid authority to cancel P2P offer')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToCancelOfferError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f4,
  () => new InvalidAuthorityToCancelOfferError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToCancelOffer',
  () => new InvalidAuthorityToCancelOfferError(),
)

/**
 * InvalidAuthorityToCreateFundraise: 'Invalid authority to create fundraise'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToCreateFundraiseError extends Error {
  readonly code: number = 0x17f5
  readonly name: string = 'InvalidAuthorityToCreateFundraise'
  constructor() {
    super('Invalid authority to create fundraise')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToCreateFundraiseError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f5,
  () => new InvalidAuthorityToCreateFundraiseError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToCreateFundraise',
  () => new InvalidAuthorityToCreateFundraiseError(),
)

/**
 * InvalidRoleToSupport: 'Invalid role to perform the support club action'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRoleToSupportError extends Error {
  readonly code: number = 0x17f6
  readonly name: string = 'InvalidRoleToSupport'
  constructor() {
    super('Invalid role to perform the support club action')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidRoleToSupportError)
    }
  }
}

createErrorFromCodeLookup.set(0x17f6, () => new InvalidRoleToSupportError())
createErrorFromNameLookup.set(
  'InvalidRoleToSupport',
  () => new InvalidRoleToSupportError(),
)

/**
 * InvalidAuthorityToFinishStaking: 'Invalid role to finish staking'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToFinishStakingError extends Error {
  readonly code: number = 0x17f7
  readonly name: string = 'InvalidAuthorityToFinishStaking'
  constructor() {
    super('Invalid role to finish staking')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToFinishStakingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f7,
  () => new InvalidAuthorityToFinishStakingError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToFinishStaking',
  () => new InvalidAuthorityToFinishStakingError(),
)

/**
 * InvalidAuthorityToInitializeStaking: 'Invalid role to initialize staking'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToInitializeStakingError extends Error {
  readonly code: number = 0x17f8
  readonly name: string = 'InvalidAuthorityToInitializeStaking'
  constructor() {
    super('Invalid role to initialize staking')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToInitializeStakingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f8,
  () => new InvalidAuthorityToInitializeStakingError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToInitializeStaking',
  () => new InvalidAuthorityToInitializeStakingError(),
)

/**
 * InvalidAuthorityToUpdateAllocation: 'Invalid authority to update allocation'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToUpdateAllocationError extends Error {
  readonly code: number = 0x17f9
  readonly name: string = 'InvalidAuthorityToUpdateAllocation'
  constructor() {
    super('Invalid authority to update allocation')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToUpdateAllocationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17f9,
  () => new InvalidAuthorityToUpdateAllocationError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToUpdateAllocation',
  () => new InvalidAuthorityToUpdateAllocationError(),
)

/**
 * InvalidClubType: 'Club type not implemented'
 *
 * @category Errors
 * @category generated
 */
export class InvalidClubTypeError extends Error {
  readonly code: number = 0x17fa
  readonly name: string = 'InvalidClubType'
  constructor() {
    super('Club type not implemented')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidClubTypeError)
    }
  }
}

createErrorFromCodeLookup.set(0x17fa, () => new InvalidClubTypeError())
createErrorFromNameLookup.set(
  'InvalidClubType',
  () => new InvalidClubTypeError(),
)

/**
 * InvalidMintOfNftToBuy: 'The mint of the NFT that the offer was made for is different'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintOfNftToBuyError extends Error {
  readonly code: number = 0x17fb
  readonly name: string = 'InvalidMintOfNftToBuy'
  constructor() {
    super('The mint of the NFT that the offer was made for is different')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMintOfNftToBuyError)
    }
  }
}

createErrorFromCodeLookup.set(0x17fb, () => new InvalidMintOfNftToBuyError())
createErrorFromNameLookup.set(
  'InvalidMintOfNftToBuy',
  () => new InvalidMintOfNftToBuyError(),
)

/**
 * WrongAmountOfOfferedToken: 'Wrong amount of offered token'
 *
 * @category Errors
 * @category generated
 */
export class WrongAmountOfOfferedTokenError extends Error {
  readonly code: number = 0x17fc
  readonly name: string = 'WrongAmountOfOfferedToken'
  constructor() {
    super('Wrong amount of offered token')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongAmountOfOfferedTokenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17fc,
  () => new WrongAmountOfOfferedTokenError(),
)
createErrorFromNameLookup.set(
  'WrongAmountOfOfferedToken',
  () => new WrongAmountOfOfferedTokenError(),
)

/**
 * CanNotUpdateGovernanceConfig: 'Can not update governance with proposals in voting state'
 *
 * @category Errors
 * @category generated
 */
export class CanNotUpdateGovernanceConfigError extends Error {
  readonly code: number = 0x17fd
  readonly name: string = 'CanNotUpdateGovernanceConfig'
  constructor() {
    super('Can not update governance with proposals in voting state')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CanNotUpdateGovernanceConfigError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17fd,
  () => new CanNotUpdateGovernanceConfigError(),
)
createErrorFromNameLookup.set(
  'CanNotUpdateGovernanceConfig',
  () => new CanNotUpdateGovernanceConfigError(),
)

/**
 * UpdateGovernanceProposalActive: 'Update governance proposal active'
 *
 * @category Errors
 * @category generated
 */
export class UpdateGovernanceProposalActiveError extends Error {
  readonly code: number = 0x17fe
  readonly name: string = 'UpdateGovernanceProposalActive'
  constructor() {
    super('Update governance proposal active')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UpdateGovernanceProposalActiveError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x17fe,
  () => new UpdateGovernanceProposalActiveError(),
)
createErrorFromNameLookup.set(
  'UpdateGovernanceProposalActive',
  () => new UpdateGovernanceProposalActiveError(),
)

/**
 * InvalidProposalState: 'Invalid proposal state'
 *
 * @category Errors
 * @category generated
 */
export class InvalidProposalStateError extends Error {
  readonly code: number = 0x17ff
  readonly name: string = 'InvalidProposalState'
  constructor() {
    super('Invalid proposal state')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidProposalStateError)
    }
  }
}

createErrorFromCodeLookup.set(0x17ff, () => new InvalidProposalStateError())
createErrorFromNameLookup.set(
  'InvalidProposalState',
  () => new InvalidProposalStateError(),
)

/**
 * ChangeClubConfigGovernanceAlredyCreated: 'Change club config governance alredy created'
 *
 * @category Errors
 * @category generated
 */
export class ChangeClubConfigGovernanceAlredyCreatedError extends Error {
  readonly code: number = 0x1800
  readonly name: string = 'ChangeClubConfigGovernanceAlredyCreated'
  constructor() {
    super('Change club config governance alredy created')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(
        this,
        ChangeClubConfigGovernanceAlredyCreatedError,
      )
    }
  }
}

createErrorFromCodeLookup.set(
  0x1800,
  () => new ChangeClubConfigGovernanceAlredyCreatedError(),
)
createErrorFromNameLookup.set(
  'ChangeClubConfigGovernanceAlredyCreated',
  () => new ChangeClubConfigGovernanceAlredyCreatedError(),
)

/**
 * InvalidAuthorityToStartStaking: 'Invalid role to start staking'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityToStartStakingError extends Error {
  readonly code: number = 0x1801
  readonly name: string = 'InvalidAuthorityToStartStaking'
  constructor() {
    super('Invalid role to start staking')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidAuthorityToStartStakingError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1801,
  () => new InvalidAuthorityToStartStakingError(),
)
createErrorFromNameLookup.set(
  'InvalidAuthorityToStartStaking',
  () => new InvalidAuthorityToStartStakingError(),
)

/**
 * InvalidDepositRecordState: 'Invalid DepositRecord State'
 *
 * @category Errors
 * @category generated
 */
export class InvalidDepositRecordStateError extends Error {
  readonly code: number = 0x1802
  readonly name: string = 'InvalidDepositRecordState'
  constructor() {
    super('Invalid DepositRecord State')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidDepositRecordStateError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1802,
  () => new InvalidDepositRecordStateError(),
)
createErrorFromNameLookup.set(
  'InvalidDepositRecordState',
  () => new InvalidDepositRecordStateError(),
)

/**
 * ReservedRightsCannotBeOverridden: 'Reserved rights cannot be overridden'
 *
 * @category Errors
 * @category generated
 */
export class ReservedRightsCannotBeOverriddenError extends Error {
  readonly code: number = 0x1803
  readonly name: string = 'ReservedRightsCannotBeOverridden'
  constructor() {
    super('Reserved rights cannot be overridden')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReservedRightsCannotBeOverriddenError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1803,
  () => new ReservedRightsCannotBeOverriddenError(),
)
createErrorFromNameLookup.set(
  'ReservedRightsCannotBeOverridden',
  () => new ReservedRightsCannotBeOverriddenError(),
)

/**
 * ReservedRightsCannotSetAfterFundraise: 'Reserved rights cannot be set after fundraise'
 *
 * @category Errors
 * @category generated
 */
export class ReservedRightsCannotSetAfterFundraiseError extends Error {
  readonly code: number = 0x1804
  readonly name: string = 'ReservedRightsCannotSetAfterFundraise'
  constructor() {
    super('Reserved rights cannot be set after fundraise')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ReservedRightsCannotSetAfterFundraiseError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1804,
  () => new ReservedRightsCannotSetAfterFundraiseError(),
)
createErrorFromNameLookup.set(
  'ReservedRightsCannotSetAfterFundraise',
  () => new ReservedRightsCannotSetAfterFundraiseError(),
)

/**
 * WrongTreasuryForClub: 'Wrong treasury for club'
 *
 * @category Errors
 * @category generated
 */
export class WrongTreasuryForClubError extends Error {
  readonly code: number = 0x1805
  readonly name: string = 'WrongTreasuryForClub'
  constructor() {
    super('Wrong treasury for club')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongTreasuryForClubError)
    }
  }
}

createErrorFromCodeLookup.set(0x1805, () => new WrongTreasuryForClubError())
createErrorFromNameLookup.set(
  'WrongTreasuryForClub',
  () => new WrongTreasuryForClubError(),
)

/**
 * NotUniqueIndividualRight: 'Each pubkey for which individual rights is reserved must be unique'
 *
 * @category Errors
 * @category generated
 */
export class NotUniqueIndividualRightError extends Error {
  readonly code: number = 0x1806
  readonly name: string = 'NotUniqueIndividualRight'
  constructor() {
    super('Each pubkey for which individual rights is reserved must be unique')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotUniqueIndividualRightError)
    }
  }
}

createErrorFromCodeLookup.set(0x1806, () => new NotUniqueIndividualRightError())
createErrorFromNameLookup.set(
  'NotUniqueIndividualRight',
  () => new NotUniqueIndividualRightError(),
)

/**
 * IndividualRightNotExists: 'Individual right for authority does not exist'
 *
 * @category Errors
 * @category generated
 */
export class IndividualRightNotExistsError extends Error {
  readonly code: number = 0x1807
  readonly name: string = 'IndividualRightNotExists'
  constructor() {
    super('Individual right for authority does not exist')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IndividualRightNotExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1807, () => new IndividualRightNotExistsError())
createErrorFromNameLookup.set(
  'IndividualRightNotExists',
  () => new IndividualRightNotExistsError(),
)

/**
 * NotEnoughVoteRights: 'Not enought vote rights to vote on this proposal'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughVoteRightsError extends Error {
  readonly code: number = 0x1808
  readonly name: string = 'NotEnoughVoteRights'
  constructor() {
    super('Not enought vote rights to vote on this proposal')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotEnoughVoteRightsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1808, () => new NotEnoughVoteRightsError())
createErrorFromNameLookup.set(
  'NotEnoughVoteRights',
  () => new NotEnoughVoteRightsError(),
)

/**
 * CannotAddAndRemoveAllocation: 'You cannot add and remove allocation at the same time'
 *
 * @category Errors
 * @category generated
 */
export class CannotAddAndRemoveAllocationError extends Error {
  readonly code: number = 0x1809
  readonly name: string = 'CannotAddAndRemoveAllocation'
  constructor() {
    super('You cannot add and remove allocation at the same time')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CannotAddAndRemoveAllocationError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1809,
  () => new CannotAddAndRemoveAllocationError(),
)
createErrorFromNameLookup.set(
  'CannotAddAndRemoveAllocation',
  () => new CannotAddAndRemoveAllocationError(),
)

/**
 * InvalidFundraiseCapAmount: 'Invalid fundraise cap amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFundraiseCapAmountError extends Error {
  readonly code: number = 0x180a
  readonly name: string = 'InvalidFundraiseCapAmount'
  constructor() {
    super('Invalid fundraise cap amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFundraiseCapAmountError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x180a,
  () => new InvalidFundraiseCapAmountError(),
)
createErrorFromNameLookup.set(
  'InvalidFundraiseCapAmount',
  () => new InvalidFundraiseCapAmountError(),
)

/**
 * VotingProposalExists: 'Voting proposals exist in this club'
 *
 * @category Errors
 * @category generated
 */
export class VotingProposalExistsError extends Error {
  readonly code: number = 0x180b
  readonly name: string = 'VotingProposalExists'
  constructor() {
    super('Voting proposals exist in this club')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, VotingProposalExistsError)
    }
  }
}

createErrorFromCodeLookup.set(0x180b, () => new VotingProposalExistsError())
createErrorFromNameLookup.set(
  'VotingProposalExists',
  () => new VotingProposalExistsError(),
)

/**
 * SellPermissionRangeOverlap: 'Sell permission range overlap'
 *
 * @category Errors
 * @category generated
 */
export class SellPermissionRangeOverlapError extends Error {
  readonly code: number = 0x180c
  readonly name: string = 'SellPermissionRangeOverlap'
  constructor() {
    super('Sell permission range overlap')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SellPermissionRangeOverlapError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x180c,
  () => new SellPermissionRangeOverlapError(),
)
createErrorFromNameLookup.set(
  'SellPermissionRangeOverlap',
  () => new SellPermissionRangeOverlapError(),
)

/**
 * MaxNumberOfSellPermissionExceeded: 'Sell permission number exceeded'
 *
 * @category Errors
 * @category generated
 */
export class MaxNumberOfSellPermissionExceededError extends Error {
  readonly code: number = 0x180d
  readonly name: string = 'MaxNumberOfSellPermissionExceeded'
  constructor() {
    super('Sell permission number exceeded')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MaxNumberOfSellPermissionExceededError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x180d,
  () => new MaxNumberOfSellPermissionExceededError(),
)
createErrorFromNameLookup.set(
  'MaxNumberOfSellPermissionExceeded',
  () => new MaxNumberOfSellPermissionExceededError(),
)

/**
 * InvalidFinancialRecord: 'Invalid financial record'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFinancialRecordError extends Error {
  readonly code: number = 0x180e
  readonly name: string = 'InvalidFinancialRecord'
  constructor() {
    super('Invalid financial record')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFinancialRecordError)
    }
  }
}

createErrorFromCodeLookup.set(0x180e, () => new InvalidFinancialRecordError())
createErrorFromNameLookup.set(
  'InvalidFinancialRecord',
  () => new InvalidFinancialRecordError(),
)

/**
 * InvalidTreasuryCount: 'Invalid treasury count'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTreasuryCountError extends Error {
  readonly code: number = 0x180f
  readonly name: string = 'InvalidTreasuryCount'
  constructor() {
    super('Invalid treasury count')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTreasuryCountError)
    }
  }
}

createErrorFromCodeLookup.set(0x180f, () => new InvalidTreasuryCountError())
createErrorFromNameLookup.set(
  'InvalidTreasuryCount',
  () => new InvalidTreasuryCountError(),
)

/**
 * InvalidFinancialPower: 'Invalid financial power'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFinancialPowerError extends Error {
  readonly code: number = 0x1810
  readonly name: string = 'InvalidFinancialPower'
  constructor() {
    super('Invalid financial power')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidFinancialPowerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1810, () => new InvalidFinancialPowerError())
createErrorFromNameLookup.set(
  'InvalidFinancialPower',
  () => new InvalidFinancialPowerError(),
)

/**
 * InvalidWithdrawal: 'Invalid withdraw'
 *
 * @category Errors
 * @category generated
 */
export class InvalidWithdrawalError extends Error {
  readonly code: number = 0x1811
  readonly name: string = 'InvalidWithdrawal'
  constructor() {
    super('Invalid withdraw')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidWithdrawalError)
    }
  }
}

createErrorFromCodeLookup.set(0x1811, () => new InvalidWithdrawalError())
createErrorFromNameLookup.set(
  'InvalidWithdrawal',
  () => new InvalidWithdrawalError(),
)

/**
 * InvalidWithdrawalAmount: 'Invalid withdraw amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidWithdrawalAmountError extends Error {
  readonly code: number = 0x1812
  readonly name: string = 'InvalidWithdrawalAmount'
  constructor() {
    super('Invalid withdraw amount')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidWithdrawalAmountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1812, () => new InvalidWithdrawalAmountError())
createErrorFromNameLookup.set(
  'InvalidWithdrawalAmount',
  () => new InvalidWithdrawalAmountError(),
)

/**
 * InvalidTokenOwnerRecord: 'Invalid token owner record provided'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenOwnerRecordError extends Error {
  readonly code: number = 0x1813
  readonly name: string = 'InvalidTokenOwnerRecord'
  constructor() {
    super('Invalid token owner record provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidTokenOwnerRecordError)
    }
  }
}

createErrorFromCodeLookup.set(0x1813, () => new InvalidTokenOwnerRecordError())
createErrorFromNameLookup.set(
  'InvalidTokenOwnerRecord',
  () => new InvalidTokenOwnerRecordError(),
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
